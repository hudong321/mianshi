{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, createTextVNode as _createTextVNode, createElementVNode as _createElementVNode, vShow as _vShow, withDirectives as _withDirectives, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  id: \"home\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_van_sidebar_item = _resolveComponent(\"van-sidebar-item\");\n  const _component_van_sidebar = _resolveComponent(\"van-sidebar\");\n  const _component_van_col = _resolveComponent(\"van-col\");\n  const _component_van_collapse_item = _resolveComponent(\"van-collapse-item\");\n  const _component_van_collapse = _resolveComponent(\"van-collapse\");\n  const _component_van_row = _resolveComponent(\"van-row\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createVNode(_component_van_row, null, {\n    default: _withCtx(() => [_createVNode(_component_van_col, {\n      span: \"5\"\n    }, {\n      default: _withCtx(() => [_createVNode(_component_van_sidebar, {\n        modelValue: $data.active,\n        \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.active = $event),\n        onChange: $options.onChange\n      }, {\n        default: _withCtx(() => [_createVNode(_component_van_sidebar_item, {\n          title: \"JAVA基础\"\n        }), _createVNode(_component_van_sidebar_item, {\n          title: \"SPRING相关\"\n        }), _createVNode(_component_van_sidebar_item, {\n          title: \"标签名称\"\n        })]),\n        _: 1 /* STABLE */\n      }, 8 /* PROPS */, [\"modelValue\", \"onChange\"])]),\n      _: 1 /* STABLE */\n    }), _createVNode(_component_van_col, {\n      span: \"19\"\n    }, {\n      default: _withCtx(() => [_withDirectives(_createVNode(_component_van_collapse, {\n        modelValue: $data.activeName,\n        \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.activeName = $event),\n        accordion: \"\"\n      }, {\n        default: _withCtx(() => [_createVNode(_component_van_collapse_item, {\n          title: \"JAVA基本数据类型有那些\",\n          name: \"1\"\n        }, {\n          default: _withCtx(() => _cache[3] || (_cache[3] = [_createTextVNode(\"四类八种，整形（byte,short,int,long），浮点型（float,double），char类型，boolean类型\")])),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_van_collapse_item, {\n          title: \"JAVA的访问修饰符及访问范围\",\n          name: \"2\"\n        }, {\n          default: _withCtx(() => _cache[4] || (_cache[4] = [_createTextVNode(\" public可以访问任何地方 \"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\"protected可以访问当前类所在包和其子类 \"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\"default可以访问当前类所在包 \"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\"private只可以访问当前类内部 \")])),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_van_collapse_item, {\n          title: \"重载与重写的区别\",\n          name: \"3\"\n        }, {\n          default: _withCtx(() => _cache[5] || (_cache[5] = [_createTextVNode(\" 重载（overload）: 只发生在同一个类中，方法名必须相同，方法参数需不一致。与访问修饰符与返回值类型无关\"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\" 重写（overwrite）： 发生在父子类中，方法名与父类方法名相同，方法参数个数类型及返回值类型一致，抛出异常范围不大于父类，访问修饰符不小于父类。 \")])),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_van_collapse_item, {\n          title: \"Final类的特点\",\n          name: \"4\"\n        }, {\n          default: _withCtx(() => _cache[6] || (_cache[6] = [_createTextVNode(\"final修饰的类不能继承；final修饰的方法不能重写；final修饰的属性不能修改\")])),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_van_collapse_item, {\n          title: \"类的加载过程\",\n          name: \"5\"\n        }), _createVNode(_component_van_collapse_item, {\n          title: \"什么是垃圾处理\",\n          name: \"6\"\n        }, {\n          default: _withCtx(() => _cache[7] || (_cache[7] = [_createTextVNode(\" 垃圾收集是将分配给对象但不再使用的内存回收或释放的过程。如果一个对象没有指向它的引用或者其赋值为null,则次对象适合进行垃圾回收\")])),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_van_collapse_item, {\n          title: \"抽象类和接口的区别\",\n          name: \"7\"\n        }, {\n          default: _withCtx(() => _cache[8] || (_cache[8] = [_createTextVNode(\" 抽象类：抽象类单继承，不仅可以有抽象方法也可以有自己实现的方法\"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\" 接口：接口多实现，一般接口只有抽象方法。 \")])),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_van_collapse_item, {\n          title: \"什么是类的反射机制\",\n          name: \"8\"\n        }, {\n          default: _withCtx(() => _cache[9] || (_cache[9] = [_createTextVNode(\" 通过 Class对象，可以得出当前类的方法、构造方法、接口、父类等等信息，同时可以通过反射实例化一个类、设置属性、调用方法。 \")])),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_van_collapse_item, {\n          title: \"static的使用\",\n          name: \"9\"\n        }, {\n          default: _withCtx(() => _cache[10] || (_cache[10] = [_createTextVNode(\" 静态方法不可以调用非静态的属性和方法 \"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\" 非静态方法可以调用静态方法和属性 \")])),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_van_collapse_item, {\n          title: \"写clone()方法时通常都有一行代码\",\n          name: \"10\"\n        }, {\n          default: _withCtx(() => _cache[11] || (_cache[11] = [_createTextVNode(\" super.clone()，Clone有缺省行为，它负者产生正确的大小空间，并逐位复制 \")])),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_van_collapse_item, {\n          title: \"StringBuffer和StringBuilder的区别\",\n          name: \"11\"\n        }, {\n          default: _withCtx(() => _cache[12] || (_cache[12] = [_createTextVNode(\" StringBuffer线程安全；StringBuilder效率更高，线程不安全； \")])),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_van_collapse_item, {\n          title: \"JAVA中都有那些IO流\",\n          name: \"12\"\n        }, {\n          default: _withCtx(() => _cache[13] || (_cache[13] = [_createTextVNode(\" 按单位可以分为字节流和字符流；\"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\" 按方向可以分为输入流和输出流；\"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\" 按功能可以分为高层流和低层流（低层流指一次只读取一个单位，而高层流一次可以读取一批单位） \")])),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_van_collapse_item, {\n          title: \"JVM内存模型\",\n          name: \"13\"\n        }, {\n          default: _withCtx(() => _cache[14] || (_cache[14] = [_createTextVNode(\" JVM内存模型包括执行引擎（垃圾回收，及时编译器，解释器）和运行时数据区和本地库接口\"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\" 运行时数据区包含：\"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\" 方法区（MethodArea）：存储类的信息，常量，静态变量，即时编译器编译后的代码。 \"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\" 堆（Heap）：存放new出来的对象 \"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\" 程序计数器（PC Register）：指向当前线程执行的字节码地址 \"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\" 本地方法区（Native Method Stack）：可以调用本地方法 \"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\" 虚拟机栈（JVM Stack）：存储方法的栈针，包括局部变量表，操作数栈，方法出口，动态链接等信息 \"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */)])),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_van_collapse_item, {\n          title: \"集合有哪些接口\",\n          name: \"15\"\n        }, {\n          default: _withCtx(() => _cache[15] || (_cache[15] = [_createTextVNode(\" Colection接口和Map接口；Collection下包括Set和List接口 \")])),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_van_collapse_item, {\n          title: \"ArrayList和LinkList区别\",\n          name: \"16\"\n        }, {\n          default: _withCtx(() => _cache[16] || (_cache[16] = [_createTextVNode(\" ArrayList由数组实现，查找快速，插入和删除比较慢；\"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\" LinkList由双向链表实现，插入和删除快，查询较慢，占用空间大，因为每一个元素都存放有指向下一个和上一个元素的指针。 \")])),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_van_collapse_item, {\n          title: \"Set的特点\",\n          name: \"17\"\n        }, {\n          default: _withCtx(() => _cache[17] || (_cache[17] = [_createTextVNode(\" 存放的元素都是不重复的。（先比较HashCode()方法，再比较equal()方法） \")])),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_van_collapse_item, {\n          title: \"面向对象的特征有哪像\",\n          name: \"18\"\n        }, {\n          default: _withCtx(() => _cache[18] || (_cache[18] = [_createTextVNode(\" 封装：一个类包括多个属性及方法。\"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\" 多态：静态（重载、重写）动态（父类接受子类实例，接口接受实现实例 ）\"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\" 继承：类继承于父类，具有父类的所有属性与方法，可以重用，也可以覆盖。\"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\" 抽象：找共性，将共有的属性、方法放到父类中 \")])),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_van_collapse_item, {\n          title: \"如何定义一个线程\",\n          name: \"19\"\n        }, {\n          default: _withCtx(() => _cache[19] || (_cache[19] = [_createTextVNode(\" 实现Runable接口并重写run()方法;\"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\" 继承Thread类重写run()方法；\"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\" 启动线程使用start()方法； \")])),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_van_collapse_item, {\n          title: \"wait和sleep的区别\",\n          name: \"20\"\n        }, {\n          default: _withCtx(() => _cache[20] || (_cache[20] = [_createTextVNode(\" 拥有的对象不同：wait()是Object的方法,sleep()是Thread的方法；\"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\" wait()释放对象锁，且只能在同步代码块或同步方法中使用，可以通过notify唤醒；\"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\" sleep()持有对象锁，只能等待设定时间结束，否则发生异常 \")])),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_van_collapse_item, {\n          title: \"jdk代理和cjlib代理的区别\",\n          name: \"21\"\n        }, {\n          default: _withCtx(() => _cache[21] || (_cache[21] = [_createTextVNode(\" jdk代理实现InvocationHandler接口；jdk代理只能代理接口类\"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\" cjlib代理实现MethodInterceptor接口；使用动态枝剪技术生成目标类子类来代理。 \")])),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_van_collapse_item, {\n          title: \"jdk1.8有哪些特性\",\n          name: \"22\"\n        }, {\n          default: _withCtx(() => _cache[22] || (_cache[22] = [_createTextVNode(\" 函式接口的使用\"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\" Stream的使用\"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\" LocalDateTime的使用\"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\" Optional容器的使用 \")])),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_van_collapse_item, {\n          title: \"并发问题\",\n          name: \"23\"\n        }, {\n          default: _withCtx(() => _cache[23] || (_cache[23] = [_createTextVNode(\" 有序性、原子性、可见性\"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\" volatile 修饰变量解决有序性和可见性问题；synchronzied 通过加锁解决有序性、可见性、原子性问题； \")])),\n          _: 1 /* STABLE */\n        })]),\n        _: 1 /* STABLE */\n      }, 8 /* PROPS */, [\"modelValue\"]), [[_vShow, $data.active == 0]]), _withDirectives(_createVNode(_component_van_collapse, {\n        modelValue: $data.activeName,\n        \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => $data.activeName = $event),\n        accordion: \"\"\n      }, {\n        default: _withCtx(() => [_createVNode(_component_van_collapse_item, {\n          title: \"SpringMVC流程\",\n          name: \"1\"\n        }, {\n          default: _withCtx(() => _cache[24] || (_cache[24] = [_createTextVNode(\" 用户请求->DispatcherServlet（前端控制器）->HandlerMapping（处理器映射器）‌-> HandlerAdapter（处理器适配器）-> DispatcherServlet（前端控制器）\"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\" DispatcherServlet（前端控制器）-> 执行相应的业务（从数据库中获取数据 ModelAndView） -> ViewResolver（视图解析器）-> DispatcherServlet（前端控制器）-> 返回给用户 \")])),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_van_collapse_item, {\n          title: \"依赖注入\",\n          name: \"2\"\n        }, {\n          default: _withCtx(() => _cache[25] || (_cache[25] = [_createTextVNode(\"技术无非就是那些开发它的人的共同灵魂。\")])),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_van_collapse_item, {\n          title: \"spring注入的生命周期\",\n          name: \"3\"\n        }, {\n          default: _withCtx(() => _cache[26] || (_cache[26] = [_createTextVNode(\"在代码阅读过程中人们说脏话的频率是衡量代码质量的唯一标准。\")])),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_van_collapse_item, {\n          title: \"spring常用的Annotation\",\n          name: \"1\"\n        }, {\n          default: _withCtx(() => _cache[27] || (_cache[27] = [_createTextVNode(\" @Bean、@Value、@Controller、@Service、@Repository、@Configuration、@Autowired 、@Resource、 @Import \")])),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_van_collapse_item, {\n          title: \"springboot如何实现类的配置加载\",\n          name: \"2\"\n        }, {\n          default: _withCtx(() => _cache[28] || (_cache[28] = [_createTextVNode(\"技术无非就是那些开发它的人的共同灵魂。\")])),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_van_collapse_item, {\n          title: \"标题3\",\n          name: \"3\"\n        }, {\n          default: _withCtx(() => _cache[29] || (_cache[29] = [_createTextVNode(\"在代码阅读过程中人们说脏话的频率是衡量代码质量的唯一标准。\")])),\n          _: 1 /* STABLE */\n        })]),\n        _: 1 /* STABLE */\n      }, 8 /* PROPS */, [\"modelValue\"]), [[_vShow, $data.active == 1]])]),\n      _: 1 /* STABLE */\n    })]),\n    _: 1 /* STABLE */\n  })]);\n}","map":{"version":3,"names":["id","_createElementBlock","_hoisted_1","_createVNode","_component_van_row","default","_withCtx","_component_van_col","span","_component_van_sidebar","modelValue","$data","active","_cache","$event","onChange","$options","_component_van_sidebar_item","title","_","_component_van_collapse","activeName","accordion","_component_van_collapse_item","name","_createTextVNode","_createElementVNode"],"sources":["G:\\Workspace\\CoderWorkspace\\antd-demo\\src\\components\\HomePage.vue"],"sourcesContent":["<template>\r\n  <div id=\"home\">\r\n    <van-row>\r\n      <van-col span=\"5\">\r\n        <van-sidebar v-model=\"active\" @change=\"onChange\">\r\n          <van-sidebar-item title=\"JAVA基础\"/>\r\n          <van-sidebar-item title=\"SPRING相关\"/>\r\n          <van-sidebar-item title=\"标签名称\"/>\r\n        </van-sidebar>\r\n      </van-col>\r\n      <van-col span=\"19\">\r\n        <van-collapse v-show=\"active==0\" v-model=\"activeName\" accordion>\r\n          <van-collapse-item\r\n            title=\"JAVA基本数据类型有那些\"\r\n            name=\"1\"\r\n          >四类八种，整形（byte,short,int,long），浮点型（float,double），char类型，boolean类型</van-collapse-item>\r\n          <van-collapse-item title=\"JAVA的访问修饰符及访问范围\" name=\"2\">\r\n            public可以访问任何地方\r\n            <br>protected可以访问当前类所在包和其子类\r\n            <br>default可以访问当前类所在包\r\n            <br>private只可以访问当前类内部\r\n          </van-collapse-item>\r\n          <van-collapse-item title=\"重载与重写的区别\" name=\"3\">\r\n              重载（overload）:\r\n              只发生在同一个类中，方法名必须相同，方法参数需不一致。与访问修饰符与返回值类型无关<br>\r\n              重写（overwrite）：\r\n              发生在父子类中，方法名与父类方法名相同，方法参数个数类型及返回值类型一致，抛出异常范围不大于父类，访问修饰符不小于父类。\r\n          </van-collapse-item>\r\n          <van-collapse-item title=\"Final类的特点\" name=\"4\">final修饰的类不能继承；final修饰的方法不能重写；final修饰的属性不能修改</van-collapse-item>\r\n          <van-collapse-item title=\"类的加载过程\" name=\"5\">\r\n\r\n          </van-collapse-item>\r\n          <van-collapse-item title=\"什么是垃圾处理\" name=\"6\">\r\n            垃圾收集是将分配给对象但不再使用的内存回收或释放的过程。如果一个对象没有指向它的引用或者其赋值为null,则次对象适合进行垃圾回收</van-collapse-item>\r\n          <van-collapse-item title=\"抽象类和接口的区别\" name=\"7\">\r\n            抽象类：抽象类单继承，不仅可以有抽象方法也可以有自己实现的方法<br>\r\n            接口：接口多实现，一般接口只有抽象方法。\r\n          </van-collapse-item>\r\n          <van-collapse-item title=\"什么是类的反射机制\" name=\"8\">\r\n             通过 Class对象，可以得出当前类的方法、构造方法、接口、父类等等信息，同时可以通过反射实例化一个类、设置属性、调用方法。\r\n          </van-collapse-item>\r\n          <van-collapse-item title=\"static的使用\" name=\"9\">\r\n               静态方法不可以调用非静态的属性和方法 <br>\r\n               非静态方法可以调用静态方法和属性\r\n          </van-collapse-item>\r\n          <van-collapse-item title=\"写clone()方法时通常都有一行代码\" name=\"10\">\r\n              super.clone()，Clone有缺省行为，它负者产生正确的大小空间，并逐位复制\r\n          </van-collapse-item>\r\n          <van-collapse-item title=\"StringBuffer和StringBuilder的区别\" name=\"11\">\r\n              StringBuffer线程安全；StringBuilder效率更高，线程不安全；\r\n          </van-collapse-item>\r\n          <van-collapse-item title=\"JAVA中都有那些IO流\" name=\"12\">\r\n                按单位可以分为字节流和字符流；<br>\r\n                按方向可以分为输入流和输出流；<br>\r\n                按功能可以分为高层流和低层流（低层流指一次只读取一个单位，而高层流一次可以读取一批单位）\r\n          </van-collapse-item>\r\n          <van-collapse-item title=\"JVM内存模型\" name=\"13\">\r\n              JVM内存模型包括执行引擎（垃圾回收，及时编译器，解释器）和运行时数据区和本地库接口<br>\r\n              运行时数据区包含：<br>\r\n              方法区（MethodArea）：存储类的信息，常量，静态变量，即时编译器编译后的代码。 <br>\r\n              堆（Heap）：存放new出来的对象 <br>\r\n              程序计数器（PC Register）：指向当前线程执行的字节码地址 <br>\r\n              本地方法区（Native Method Stack）：可以调用本地方法 <br>\r\n              虚拟机栈（JVM Stack）：存储方法的栈针，包括局部变量表，操作数栈，方法出口，动态链接等信息 <br>\r\n          </van-collapse-item>\r\n          <van-collapse-item title=\"集合有哪些接口\" name=\"15\">\r\n               Colection接口和Map接口；Collection下包括Set和List接口\r\n          </van-collapse-item>\r\n          <van-collapse-item title=\"ArrayList和LinkList区别\" name=\"16\">\r\n               ArrayList由数组实现，查找快速，插入和删除比较慢；<br>\r\n               LinkList由双向链表实现，插入和删除快，查询较慢，占用空间大，因为每一个元素都存放有指向下一个和上一个元素的指针。\r\n          </van-collapse-item>\r\n          <van-collapse-item title=\"Set的特点\" name=\"17\">\r\n              存放的元素都是不重复的。（先比较HashCode()方法，再比较equal()方法）\r\n          </van-collapse-item>\r\n          <van-collapse-item title=\"面向对象的特征有哪像\" name=\"18\">\r\n                封装：一个类包括多个属性及方法。<br>\r\n                多态：静态（重载、重写）动态（父类接受子类实例，接口接受实现实例 ）<br>\r\n                继承：类继承于父类，具有父类的所有属性与方法，可以重用，也可以覆盖。<br>\r\n                抽象：找共性，将共有的属性、方法放到父类中\r\n          </van-collapse-item>\r\n          <van-collapse-item title=\"如何定义一个线程\" name=\"19\">\r\n                实现Runable接口并重写run()方法;<br>\r\n                继承Thread类重写run()方法；<br>\r\n                启动线程使用start()方法；\r\n          </van-collapse-item>\r\n          <van-collapse-item title=\"wait和sleep的区别\" name=\"20\">\r\n                拥有的对象不同：wait()是Object的方法,sleep()是Thread的方法；<br>\r\n                wait()释放对象锁，且只能在同步代码块或同步方法中使用，可以通过notify唤醒；<br>\r\n                sleep()持有对象锁，只能等待设定时间结束，否则发生异常\r\n          </van-collapse-item>\r\n           <van-collapse-item title=\"jdk代理和cjlib代理的区别\" name=\"21\">\r\n                jdk代理实现InvocationHandler接口；jdk代理只能代理接口类<br>\r\n                cjlib代理实现MethodInterceptor接口；使用动态枝剪技术生成目标类子类来代理。\r\n          </van-collapse-item>\r\n           <van-collapse-item title=\"jdk1.8有哪些特性\" name=\"22\">\r\n               函式接口的使用<br>\r\n               Stream的使用<br>\r\n               LocalDateTime的使用<br>\r\n               Optional容器的使用\r\n          </van-collapse-item>\r\n           <van-collapse-item title=\"并发问题\" name=\"23\">\r\n               有序性、原子性、可见性<br>\r\n               volatile 修饰变量解决有序性和可见性问题；synchronzied 通过加锁解决有序性、可见性、原子性问题；\r\n          </van-collapse-item>\r\n        </van-collapse>\r\n        <van-collapse v-show=\"active==1\" v-model=\"activeName\" accordion>\r\n          <van-collapse-item title=\"SpringMVC流程\" name=\"1\">\r\n             用户请求->DispatcherServlet（前端控制器）->HandlerMapping（处理器映射器）‌->\r\n             HandlerAdapter（处理器适配器）-> DispatcherServlet（前端控制器）<br>\r\n             DispatcherServlet（前端控制器）-> 执行相应的业务（从数据库中获取数据 ModelAndView） ->\r\n             ViewResolver（视图解析器）-> DispatcherServlet（前端控制器）-> 返回给用户\r\n            </van-collapse-item>\r\n          <van-collapse-item title=\"依赖注入\" name=\"2\">技术无非就是那些开发它的人的共同灵魂。</van-collapse-item>\r\n          <van-collapse-item title=\"spring注入的生命周期\" name=\"3\">在代码阅读过程中人们说脏话的频率是衡量代码质量的唯一标准。</van-collapse-item>\r\n          <van-collapse-item title=\"spring常用的Annotation\" name=\"1\">\r\n             @Bean、@Value、@Controller、@Service、@Repository、@Configuration、@Autowired 、@Resource、\r\n             @Import\r\n          </van-collapse-item>\r\n          <van-collapse-item title=\"springboot如何实现类的配置加载\" name=\"2\">技术无非就是那些开发它的人的共同灵魂。</van-collapse-item>\r\n          <van-collapse-item title=\"标题3\" name=\"3\">在代码阅读过程中人们说脏话的频率是衡量代码质量的唯一标准。</van-collapse-item>\r\n        </van-collapse>\r\n      </van-col>\r\n    </van-row>\r\n  </div>\r\n</template>\r\n<script>\r\n// import { showToast } from \"vant\";\r\nexport default {\r\n  data() {\r\n    return {\r\n      activeName: \"-1\",\r\n      active: \"0\"\r\n    };\r\n  },\r\n  methods: {\r\n    onChange(index) {\r\n      this.active = index;\r\n      // showToast(index);\r\n    }\r\n  }\r\n};\r\n</script>\r\n<style scoped>\r\n#home .van-collapse-item__content {\r\n  color: rgba(226, 63, 13, 0.637);\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}