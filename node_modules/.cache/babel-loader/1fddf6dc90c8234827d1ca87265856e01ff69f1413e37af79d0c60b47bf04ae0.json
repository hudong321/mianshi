{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, createTextVNode as _createTextVNode, createElementVNode as _createElementVNode, vShow as _vShow, withDirectives as _withDirectives, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  id: \"home\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_van_sidebar_item = _resolveComponent(\"van-sidebar-item\");\n  const _component_van_sidebar = _resolveComponent(\"van-sidebar\");\n  const _component_van_col = _resolveComponent(\"van-col\");\n  const _component_van_collapse_item = _resolveComponent(\"van-collapse-item\");\n  const _component_van_collapse = _resolveComponent(\"van-collapse\");\n  const _component_van_row = _resolveComponent(\"van-row\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createVNode(_component_van_row, null, {\n    default: _withCtx(() => [_createVNode(_component_van_col, {\n      span: \"5\"\n    }, {\n      default: _withCtx(() => [_createVNode(_component_van_sidebar, {\n        modelValue: $data.active,\n        \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.active = $event),\n        onChange: $options.onChange\n      }, {\n        default: _withCtx(() => [_createVNode(_component_van_sidebar_item, {\n          title: \"JAVA基础\"\n        }), _createVNode(_component_van_sidebar_item, {\n          title: \"SPRING相关\"\n        }), _createVNode(_component_van_sidebar_item, {\n          title: \"Redis相关\"\n        }), _createVNode(_component_van_sidebar_item, {\n          title: \"Mysql相关\"\n        }), _createVNode(_component_van_sidebar_item, {\n          title: \"场景\"\n        })]),\n        _: 1 /* STABLE */\n      }, 8 /* PROPS */, [\"modelValue\", \"onChange\"])]),\n      _: 1 /* STABLE */\n    }), _createVNode(_component_van_col, {\n      span: \"19\"\n    }, {\n      default: _withCtx(() => [_withDirectives(_createVNode(_component_van_collapse, {\n        modelValue: $data.activeName,\n        \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.activeName = $event),\n        accordion: \"\"\n      }, {\n        default: _withCtx(() => [_createVNode(_component_van_collapse_item, {\n          title: \"JAVA基本数据类型有那些\",\n          name: \"1\"\n        }, {\n          default: _withCtx(() => _cache[6] || (_cache[6] = [_createTextVNode(\"四类八种，整形（byte,short,int,long），浮点型（float,double），char类型，boolean类型\")])),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_van_collapse_item, {\n          title: \"JAVA的访问修饰符及访问范围\",\n          name: \"2\"\n        }, {\n          default: _withCtx(() => _cache[7] || (_cache[7] = [_createTextVNode(\" public可以访问任何地方 \"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\"protected可以访问当前类所在包和其子类 \"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\"default可以访问当前类所在包 \"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\"private只可以访问当前类内部 \")])),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_van_collapse_item, {\n          title: \"重载与重写的区别\",\n          name: \"3\"\n        }, {\n          default: _withCtx(() => _cache[8] || (_cache[8] = [_createTextVNode(\" 重载（overload）: 只发生在同一个类中，方法名必须相同，方法参数需不一致。与访问修饰符与返回值类型无关 \"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\"重写（overwrite）： 发生在父子类中，方法名与父类方法名相同，方法参数个数类型及返回值类型一致，抛出异常范围不大于父类，访问修饰符不小于父类。 \")])),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_van_collapse_item, {\n          title: \"Final类的特点\",\n          name: \"4\"\n        }, {\n          default: _withCtx(() => _cache[9] || (_cache[9] = [_createTextVNode(\"final修饰的类不能继承；final修饰的方法不能重写；final修饰的属性不能修改\")])),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_van_collapse_item, {\n          title: \"类的加载过程\",\n          name: \"5\"\n        }, {\n          default: _withCtx(() => _cache[10] || (_cache[10] = [_createTextVNode(\" 类加载按需加载，当需要一个类时，类加载器会将类的字节码文件加载到内存中，放到方法区，生成此类的模板。而类加载器会 使用双亲委派的模式，避免此类重复加载。\"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\" 而类加载一般有类加载->链接（验证、准备、解析）->初始化几个过程 \")])),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_van_collapse_item, {\n          title: \"什么是垃圾处理\",\n          name: \"6\"\n        }, {\n          default: _withCtx(() => _cache[11] || (_cache[11] = [_createTextVNode(\"垃圾收集是将分配给对象但不再使用的内存回收或释放的过程。如果一个对象没有指向它的引用或者其赋值为null,则次对象适合进行垃圾回收\")])),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_van_collapse_item, {\n          title: \"抽象类和接口的区别\",\n          name: \"7\"\n        }, {\n          default: _withCtx(() => _cache[12] || (_cache[12] = [_createTextVNode(\" 抽象类：抽象类单继承，不仅可以有抽象方法也可以有自己实现的方法 \"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\"接口：接口多实现，一般接口只有抽象方法。 \")])),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_van_collapse_item, {\n          title: \"什么是类的反射机制\",\n          name: \"8\"\n        }, {\n          default: _withCtx(() => _cache[13] || (_cache[13] = [_createTextVNode(\"通过 Class对象，可以得出当前类的方法、构造方法、接口、父类等等信息，同时可以通过反射实例化一个类、设置属性、调用方法。\")])),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_van_collapse_item, {\n          title: \"static的使用\",\n          name: \"9\"\n        }, {\n          default: _withCtx(() => _cache[14] || (_cache[14] = [_createTextVNode(\" 静态方法不可以调用非静态的属性和方法 \"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\"非静态方法可以调用静态方法和属性 \")])),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_van_collapse_item, {\n          title: \"写clone()方法时通常都有一行代码\",\n          name: \"10\"\n        }, {\n          default: _withCtx(() => _cache[15] || (_cache[15] = [_createTextVNode(\"super.clone()，Clone有缺省行为，它负者产生正确的大小空间，并逐位复制\")])),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_van_collapse_item, {\n          title: \"StringBuffer和StringBuilder的区别\",\n          name: \"11\"\n        }, {\n          default: _withCtx(() => _cache[16] || (_cache[16] = [_createTextVNode(\"StringBuffer线程安全；StringBuilder效率更高，线程不安全；\")])),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_van_collapse_item, {\n          title: \"JAVA中都有那些IO流\",\n          name: \"12\"\n        }, {\n          default: _withCtx(() => _cache[17] || (_cache[17] = [_createTextVNode(\" 按单位可以分为字节流和字符流； \"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\"按方向可以分为输入流和输出流； \"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\"按功能可以分为高层流和低层流（低层流指一次只读取一个单位，而高层流一次可以读取一批单位） \")])),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_van_collapse_item, {\n          title: \"JVM内存模型\",\n          name: \"13\"\n        }, {\n          default: _withCtx(() => _cache[18] || (_cache[18] = [_createTextVNode(\" JVM内存模型包括执行引擎（垃圾回收，及时编译器，解释器）和运行时数据区和本地库接口 \"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\"运行时数据区包含： \"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\"方法区（MethodArea）：存储类的信息，常量，静态变量，即时编译器编译后的代码。 \"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\"堆（Heap）：存放new出来的对象 \"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\"程序计数器（PC Register）：指向当前线程执行的字节码地址 \"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\"本地方法区（Native Method Stack）：可以调用本地方法 \"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\"虚拟机栈（JVM Stack）：存储方法的栈针，包括局部变量表，操作数栈，方法出口，动态链接等信息 \"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */)])),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_van_collapse_item, {\n          title: \"集合有哪些接口\",\n          name: \"15\"\n        }, {\n          default: _withCtx(() => _cache[19] || (_cache[19] = [_createTextVNode(\"Colection接口和Map接口；Collection下包括Set和List接口\")])),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_van_collapse_item, {\n          title: \"ArrayList和LinkList区别\",\n          name: \"16\"\n        }, {\n          default: _withCtx(() => _cache[20] || (_cache[20] = [_createTextVNode(\" ArrayList由数组实现，查找快速，插入和删除比较慢； \"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\"LinkList由双向链表实现，插入和删除快，查询较慢，占用空间大，因为每一个元素都存放有指向下一个和上一个元素的指针。 \")])),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_van_collapse_item, {\n          title: \"Set的特点\",\n          name: \"17\"\n        }, {\n          default: _withCtx(() => _cache[21] || (_cache[21] = [_createTextVNode(\"存放的元素都是不重复的。（先比较HashCode()方法，再比较equal()方法）\")])),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_van_collapse_item, {\n          title: \"面向对象的特征有哪像\",\n          name: \"18\"\n        }, {\n          default: _withCtx(() => _cache[22] || (_cache[22] = [_createTextVNode(\" 封装：一个类包括多个属性及方法。 \"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\"多态：静态（重载、重写）动态（父类接受子类实例，接口接受实现实例 ） \"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\"继承：类继承于父类，具有父类的所有属性与方法，可以重用，也可以覆盖。 \"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\"抽象：找共性，将共有的属性、方法放到父类中 \")])),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_van_collapse_item, {\n          title: \"如何定义一个线程\",\n          name: \"19\"\n        }, {\n          default: _withCtx(() => _cache[23] || (_cache[23] = [_createTextVNode(\" 实现Runable接口并重写run()方法; \"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\"继承Thread类重写run()方法； \"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\"启动线程使用start()方法； \")])),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_van_collapse_item, {\n          title: \"wait和sleep的区别\",\n          name: \"20\"\n        }, {\n          default: _withCtx(() => _cache[24] || (_cache[24] = [_createTextVNode(\" 拥有的对象不同：wait()是Object的方法,sleep()是Thread的方法； \"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\"wait()释放对象锁，且只能在同步代码块或同步方法中使用，可以通过notify唤醒； \"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\"sleep()持有对象锁，只能等待设定时间结束，否则发生异常 \")])),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_van_collapse_item, {\n          title: \"jdk代理和cjlib代理的区别\",\n          name: \"21\"\n        }, {\n          default: _withCtx(() => _cache[25] || (_cache[25] = [_createTextVNode(\" jdk代理实现InvocationHandler接口；jdk代理只能代理接口类 \"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\"cjlib代理实现MethodInterceptor接口；使用动态枝剪技术生成目标类子类来代理。 \")])),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_van_collapse_item, {\n          title: \"jdk1.8有哪些特性\",\n          name: \"22\"\n        }, {\n          default: _withCtx(() => _cache[26] || (_cache[26] = [_createTextVNode(\" 函式接口的使用 \"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\"Stream的使用 \"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\"LocalDateTime的使用 \"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\"Optional容器的使用 \")])),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_van_collapse_item, {\n          title: \"并发问题\",\n          name: \"23\"\n        }, {\n          default: _withCtx(() => _cache[27] || (_cache[27] = [_createTextVNode(\" 有序性、原子性、可见性 \"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\"volatile 修饰变量解决有序性和可见性问题；synchronzied 通过加锁解决有序性、可见性、原子性问题； \")])),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_van_collapse_item, {\n          title: \"java中的类加载器\",\n          name: \"24\"\n        }, {\n          default: _withCtx(() => _cache[28] || (_cache[28] = [_createTextVNode(\" 1.引导类加载器；加载java的核心库 2.扩展类加载器；加载扩展类库(jre lib下的jar包) 3.系统类加载器；加载应用类路径下的类及jar包 4.自定义加载器 \")])),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_van_collapse_item, {\n          title: \"java值传递和引用传递\",\n          name: \"25\"\n        }, {\n          default: _withCtx(() => _cache[29] || (_cache[29] = [_createTextVNode(\" 值传递的是副本，不会改变地址； 引用传递的是引用地址。java中只用值传递。 \")])),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_van_collapse_item, {\n          title: \"for和forEach区别\",\n          name: \"26\"\n        }, {\n          default: _withCtx(() => _cache[30] || (_cache[30] = [_createTextVNode(\" for通过index下标进行访问；forEach通过指针进行访问 \")])),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_van_collapse_item, {\n          title: \"乐观锁和悲观锁的区别\",\n          name: \"27\"\n        }, {\n          default: _withCtx(() => _cache[31] || (_cache[31] = [_createTextVNode(\" 悲观锁设计思路是当存在多个线程竞争一个资源的可能，首先会加上锁，阻止其他线程获得这个资源，直到他对资源修改完成。例如sychronized关键字\"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\" 乐观锁设计思路是当存在多个线程竞争一个资源的可能，首先会获取资源，然后修改资源，最后再看是否发生冲突。实现方式有CAS，版本号控制等。\"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\" 悲观锁用于资源冲突频繁的地方，乐观锁用多用于资源冲突较少的地方，相比悲观锁他的效率更高。 \")])),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_van_collapse_item, {\n          title: \"jvm的调优命令有哪些\",\n          name: \"28\"\n        }, {\n          default: _withCtx(() => _cache[32] || (_cache[32] = [_createTextVNode(\" jstack 查看线程状态，分析出繁忙的线程在干嘛 jmap 查看内存信息，生成dump文件 jinfo 查看jvm参数和修改部分动态参数 jstat 查看jvm状态 jps 查看进程 \")])),\n          _: 1 /* STABLE */\n        })]),\n        _: 1 /* STABLE */\n      }, 8 /* PROPS */, [\"modelValue\"]), [[_vShow, $data.active == 0]]), _withDirectives(_createVNode(_component_van_collapse, {\n        modelValue: $data.activeName,\n        \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => $data.activeName = $event),\n        accordion: \"\"\n      }, {\n        default: _withCtx(() => [_createVNode(_component_van_collapse_item, {\n          title: \"SpringMVC流程\",\n          name: \"1\"\n        }, {\n          default: _withCtx(() => _cache[33] || (_cache[33] = [_createTextVNode(\" 用户请求->DispatcherServlet（前端控制器）->HandlerMapping（处理器映射器）‌-> HandlerAdapter（处理器适配器）-> DispatcherServlet（前端控制器） \"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\"DispatcherServlet（前端控制器）-> 执行相应的业务（从数据库中获取数据 ModelAndView） -> ViewResolver（视图解析器）-> DispatcherServlet（前端控制器）-> 返回给用户 \")])),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_van_collapse_item, {\n          title: \"依赖注入\",\n          name: \"2\"\n        }, {\n          default: _withCtx(() => _cache[34] || (_cache[34] = [_createTextVNode(\" 一种重要的设计模式，允许对象在不直接创建依赖的情况下使用， 通过spring容器来管理这些依赖。 \"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\"一般的可以通过构造器，setter方法及接口进行依赖注入 \")])),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_van_collapse_item, {\n          title: \"Spring中bean的生命周期\",\n          name: \"3\"\n        }, {\n          default: _withCtx(() => _cache[35] || (_cache[35] = [_createTextVNode(\" bean对象的实例化;通过beanFactory工厂创建bean对象 \"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\"依赖注入;通过setter方法或者构造器进行 \"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\"初始化 \"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\"销毁 \"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\"这其中提供了许多钩子函数，比如初始化前的beanNameAware、beanFactoryAware提供容器信息。 beanPostProcessor提供ben初始化前后的自定义逻辑postProcessBeforeInitialization()、postProcessAfterInitialization()。 initalizingBean接口提供初始化后初始化逻辑。 \")])),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_van_collapse_item, {\n          title: \"spring常用的Annotation\",\n          name: \"4\"\n        }, {\n          default: _withCtx(() => _cache[36] || (_cache[36] = [_createTextVNode(\" @Bean、@Value、@Controller、@Service、@Repository、@Configuration、@Autowired 、@Resource、 @Import、@Qualifier \")])),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_van_collapse_item, {\n          title: \"Springboot如何实现类的配置加载\",\n          name: \"5\"\n        }, {\n          default: _withCtx(() => _cache[37] || (_cache[37] = [_createTextVNode(\"技术无非就是那些开发它的人的共同灵魂。\")])),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_van_collapse_item, {\n          title: \"Spring中事务失效\",\n          name: \"6\"\n        }, {\n          default: _withCtx(() => _cache[38] || (_cache[38] = [_createTextVNode(\" 1. @Transcation注解用到非public方法上修饰对的（springAop特性） \"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\"2.由于数据库引擎不支持事务(如mysql的Mysiam) \"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\"3. spring容器管理的bean才接受事务 \"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\"4. 当前类自身调用自己的方法 \"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\"5. 异常类错误类型（非运行时异常） \")])),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_van_collapse_item, {\n          title: \"Spring如何解决循环依赖\",\n          name: \"7\"\n        }, {\n          default: _withCtx(() => _cache[39] || (_cache[39] = [_createTextVNode(\"三级缓存和延迟加载机制。（先在缓存中创建中创建纯净对象，延迟完成实例化）\")])),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_van_collapse_item, {\n          title: \"BeanFactory与ApplicationContext区别\",\n          name: \"8\"\n        }, {\n          default: _withCtx(() => _cache[40] || (_cache[40] = [_createTextVNode(\" BeanFactory主要作用是bean的创建和读取；\"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\" ApplicationContext继承于BeanFactory功能更丰富，国际化、aop、消息发送响应机制 \")])),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_van_collapse_item, {\n          title: \"Spring中支持bean作用域有哪些\",\n          name: \"9\"\n        }, {\n          default: _withCtx(() => _cache[41] || (_cache[41] = [_createTextVNode(\" 1.singleton; 单例模式 \"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\" 2.protoype; 原型模式 \"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\" 3.request; 每次http请求都会创建一个request \"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\" 4.session; 每次session会回都会有一个session域 \"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\" 5.global-session 所有的session会话都有一个gloabal-session域 \")])),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_van_collapse_item, {\n          title: \"@RequestParam和@RequestBody区别\",\n          name: \"9\"\n        }, {\n          default: _withCtx(() => _cache[42] || (_cache[42] = [_createTextVNode(\" @RequestBody只接受请求体的格式请求，一般为Post请求 \"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\" @RequestParam 只接受key-value的参数，一般为get请求 \")])),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_van_collapse_item, {\n          title: \"SpringCloud有哪些组件\",\n          name: \"10\"\n        }, {\n          default: _withCtx(() => _cache[43] || (_cache[43] = [_createTextVNode(\" Eurake 注册中心\"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\" Zuul 网关服务\"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\" Feign 微服务之间的调用\"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\" Ribbon 实现分布式服务时提供负载均衡策略\"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\" Hystrix 提供熔断机制，实现服务隔离 \")])),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_van_collapse_item, {\n          title: \"Spring的特性\",\n          name: \"11\"\n        }, {\n          default: _withCtx(() => _cache[44] || (_cache[44] = [_createTextVNode(\" 1.IOC（控制反转）将创建对象的权利交由spring进行管理\"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\" 2.DI（依赖注入）允许对象在不直接创建依赖的情况下使用，通过spring容器来管理这些依赖。\"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\" 3.AOP（切面编程）不修改源代码的情况下对其进行增强，比如日志的记录。 \")])),\n          _: 1 /* STABLE */\n        })]),\n        _: 1 /* STABLE */\n      }, 8 /* PROPS */, [\"modelValue\"]), [[_vShow, $data.active == 1]]), _withDirectives(_createVNode(_component_van_collapse, {\n        modelValue: $data.activeName,\n        \"onUpdate:modelValue\": _cache[3] || (_cache[3] = $event => $data.activeName = $event),\n        accordion: \"\"\n      }, {\n        default: _withCtx(() => [_createVNode(_component_van_collapse_item, {\n          title: \"Redis的部署模式\",\n          name: \"1\"\n        }, {\n          default: _withCtx(() => _cache[45] || (_cache[45] = [_createTextVNode(\" 1.单机模式；即部署一台redis服务\"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\" 2.主从模式；即部署一个redis主服务器master，多个slave服务。主redis服务主要用于写，从服务用于读。主服务写完成同步更新到从服务\"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\" 3.Sentinel哨兵模式；避免主服务master出现不可用的情况\"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\" 4.集群模式 \")])),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_van_collapse_item, {\n          title: \"Redis的分区方案\",\n          name: \"2\"\n        }, {\n          default: _withCtx(() => _cache[46] || (_cache[46] = [_createTextVNode(\" 1.客户端分区，由客户端决定数据在哪个节点的存取\"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\" 2.代理分区；客户端将请求发送给代理，由代理决定数据存在什么分区\"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\" 3.查路由，客户端随机请求一个ridis实例，然后redis将请求转发给正确的redis节点 \")])),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_van_collapse_item, {\n          title: \"Redis的RDB与AOF模式优缺点\",\n          name: \"3\"\n        }, {\n          default: _withCtx(() => _cache[47] || (_cache[47] = [_createTextVNode(\" RDB为快照模式，即某一时间点子线程会把redis所有的数据以文件形式存储到磁盘中。 这样主线程负责数据处理，而不影响子线程io处理。保证性能最大化。缺点是可能导致数据丢失。\"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\" AOF为追加型模式，可以让每条命令都会以追加文件形式持久化，rewrite模式可以使文件过大时合并命令。 对于RDB来说更加安全。 \")])),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_van_collapse_item, {\n          title: \"Redis的缓冲穿透解决\",\n          name: \"4\"\n        }, {\n          default: _withCtx(() => _cache[48] || (_cache[48] = [_createTextVNode(\" 缓冲穿透指的是用户大量的访问数据库中没有的数据，导致系统崩溃或者响应变慢。\"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\" 1.可以设置键值为null的数据。\"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\" 2.使用布隆过滤器，在访问数据库之前过滤掉非法的key值 \")])),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_van_collapse_item, {\n          title: \"Redis的使用场景\",\n          name: \"5\"\n        }, {\n          default: _withCtx(() => _cache[49] || (_cache[49] = [_createTextVNode(\" 1.读多写少\"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\" 2.分布式锁\"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\" 3.字典类数据\"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\" 4.时效性数据, 比如验证码\"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\" 5.系统单点登陆存储用户信息\"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */)])),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_van_collapse_item, {\n          title: \"为什么redis单线程效果好\",\n          name: \"6\"\n        }, {\n          default: _withCtx(() => _cache[50] || (_cache[50] = [_createTextVNode(\" 基于内存读写，使用nio的多路复用技术 \")])),\n          _: 1 /* STABLE */\n        })]),\n        _: 1 /* STABLE */\n      }, 8 /* PROPS */, [\"modelValue\"]), [[_vShow, $data.active == 2]]), _withDirectives(_createVNode(_component_van_collapse, {\n        modelValue: $data.activeName,\n        \"onUpdate:modelValue\": _cache[4] || (_cache[4] = $event => $data.activeName = $event),\n        accordion: \"\"\n      }, {\n        default: _withCtx(() => [_createVNode(_component_van_collapse_item, {\n          title: \"Mysql优化有哪些方式\",\n          name: \"1\"\n        }, {\n          default: _withCtx(() => _cache[51] || (_cache[51] = [_createTextVNode(\" 索引优化，当需要频繁作为条件使用的字段添加索引；\"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\" 多个条件时可以建立组合索引；\"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\" 使用explain来分析语句，避免多个条件时索引失效。\"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\" 使用缓冲存储热点数据，避免频繁使用数据库\"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */)])),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_van_collapse_item, {\n          title: \"什么情况下索引会失效\",\n          name: \"2\"\n        }, {\n          default: _withCtx(() => _cache[52] || (_cache[52] = [_createTextVNode(\" 组合索引时没有遵循最左索引原则\"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\" 查询条件使用不等号（not）、or、like\"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\" 在索引列上进行相关计算\"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */)])),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_van_collapse_item, {\n          title: \"Mysql的引擎有哪些\",\n          name: \"3\"\n        }, {\n          default: _withCtx(() => _cache[53] || (_cache[53] = [_createTextVNode(\" InnoDB;事务型存储引擎，并且有较高并发的读取效率\"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\" MyISAM;不支持事务处理和行级锁，特点简单、快速、小巧\"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\" MEMORY;存储引擎，存放在内存中，数据量小，读取块\"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\" ARCHIVE;归档，有很好的压缩机制\"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\" CSV;紧凑数据块,支持CSV格式数据文件,常用于其他软件或数据库中导入数据 \")])),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_van_collapse_item, {\n          title: \"聚簇索引与非聚簇索引\",\n          name: \"4\"\n        }, {\n          default: _withCtx(() => _cache[54] || (_cache[54] = [_createTextVNode(\" 聚簇索引指的是值与索引都是一样的，找到索引就找到值了，一般主键都是聚簇索引\"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\" 非聚簇索引，索引与值非开存储，查询时需要先查到索引然后再根据索引查询值\"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */)])),\n          _: 1 /* STABLE */\n        })]),\n        _: 1 /* STABLE */\n      }, 8 /* PROPS */, [\"modelValue\"]), [[_vShow, $data.active == 3]]), _withDirectives(_createVNode(_component_van_collapse, {\n        modelValue: $data.activeName,\n        \"onUpdate:modelValue\": _cache[5] || (_cache[5] = $event => $data.activeName = $event),\n        accordion: \"\"\n      }, {\n        default: _withCtx(() => [_createVNode(_component_van_collapse_item, {\n          title: \"Redis和Mysql数据不一致\",\n          name: \"1\"\n        }), _createVNode(_component_van_collapse_item, {\n          title: \"登陆模块的步骤\",\n          name: \"2\"\n        }, {\n          default: _withCtx(() => _cache[55] || (_cache[55] = [_createTextVNode(\" 1.用户登陆信息验证\"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\" 2.给用户发送token\"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\" 3.之后的信息传输对token进验证 \")])),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_van_collapse_item, {\n          title: \"cookie和session的区别\",\n          name: \"3\"\n        }, {\n          default: _withCtx(() => _cache[56] || (_cache[56] = [_createTextVNode(\" 1.cookie是存储在客户端中,session存储在服务器中\"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\" 2.cookie可以在客户端中持久化存储,而对话结束后session会销毁\"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\" 3.cookie存储的数据量较小,而session可存储数据量大 \")])),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_van_collapse_item, {\n          title: \"高并发时对系统的保护措施\",\n          name: \"4\"\n        }, {\n          default: _withCtx(() => _cache[57] || (_cache[57] = [_createTextVNode(\" 1.对服务器引入缓存机制;如redis,避免频繁访问数据库\"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\" 2.网关上可以作限流或者降级处理\"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\" 3.使用消息队列中间部件，实现削峰填谷 \")])),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_van_collapse_item, {\n          title: \"当超时订单未完成支付时如何处理\",\n          name: \"5\"\n        }, {\n          default: _withCtx(() => _cache[58] || (_cache[58] = [_createTextVNode(\" 消息投入到死信队列中，到达时间后，死信交换机将消息投递到消费队列， 消费队列查找没有支付订单则删除该订单。 \")])),\n          _: 1 /* STABLE */\n        })]),\n        _: 1 /* STABLE */\n      }, 8 /* PROPS */, [\"modelValue\"]), [[_vShow, $data.active == 4]])]),\n      _: 1 /* STABLE */\n    })]),\n    _: 1 /* STABLE */\n  })]);\n}","map":{"version":3,"names":["id","_createElementBlock","_hoisted_1","_createVNode","_component_van_row","default","_withCtx","_component_van_col","span","_component_van_sidebar","modelValue","$data","active","_cache","$event","onChange","$options","_component_van_sidebar_item","title","_","_component_van_collapse","activeName","accordion","_component_van_collapse_item","name","_createTextVNode","_createElementVNode"],"sources":["G:\\Workspace\\CoderWorkspace\\antd-demo\\src\\components\\HomePage.vue"],"sourcesContent":["<template>\r\n  <div id=\"home\">\r\n    <van-row>\r\n      <van-col span=\"5\">\r\n        <van-sidebar v-model=\"active\" @change=\"onChange\">\r\n          <van-sidebar-item title=\"JAVA基础\"/>\r\n          <van-sidebar-item title=\"SPRING相关\"/>\r\n          <van-sidebar-item title=\"Redis相关\"/>\r\n          <van-sidebar-item title=\"Mysql相关\"/>\r\n          <van-sidebar-item title=\"场景\"/>\r\n        </van-sidebar>\r\n      </van-col>\r\n      <van-col span=\"19\">\r\n        <van-collapse v-show=\"active==0\" v-model=\"activeName\" accordion>\r\n          <van-collapse-item\r\n            title=\"JAVA基本数据类型有那些\"\r\n            name=\"1\"\r\n          >四类八种，整形（byte,short,int,long），浮点型（float,double），char类型，boolean类型</van-collapse-item>\r\n          <van-collapse-item title=\"JAVA的访问修饰符及访问范围\" name=\"2\">\r\n            public可以访问任何地方\r\n            <br>protected可以访问当前类所在包和其子类\r\n            <br>default可以访问当前类所在包\r\n            <br>private只可以访问当前类内部\r\n          </van-collapse-item>\r\n          <van-collapse-item title=\"重载与重写的区别\" name=\"3\">\r\n            重载（overload）:\r\n            只发生在同一个类中，方法名必须相同，方法参数需不一致。与访问修饰符与返回值类型无关\r\n            <br>重写（overwrite）：\r\n            发生在父子类中，方法名与父类方法名相同，方法参数个数类型及返回值类型一致，抛出异常范围不大于父类，访问修饰符不小于父类。\r\n          </van-collapse-item>\r\n          <van-collapse-item title=\"Final类的特点\" name=\"4\">final修饰的类不能继承；final修饰的方法不能重写；final修饰的属性不能修改</van-collapse-item>\r\n          <van-collapse-item title=\"类的加载过程\" name=\"5\">\r\n               类加载按需加载，当需要一个类时，类加载器会将类的字节码文件加载到内存中，放到方法区，生成此类的模板。而类加载器会\r\n               使用双亲委派的模式，避免此类重复加载。<br>\r\n               而类加载一般有类加载->链接（验证、准备、解析）->初始化几个过程\r\n          </van-collapse-item>\r\n          <van-collapse-item\r\n            title=\"什么是垃圾处理\"\r\n            name=\"6\"\r\n          >垃圾收集是将分配给对象但不再使用的内存回收或释放的过程。如果一个对象没有指向它的引用或者其赋值为null,则次对象适合进行垃圾回收</van-collapse-item>\r\n          <van-collapse-item title=\"抽象类和接口的区别\" name=\"7\">\r\n            抽象类：抽象类单继承，不仅可以有抽象方法也可以有自己实现的方法\r\n            <br>接口：接口多实现，一般接口只有抽象方法。\r\n          </van-collapse-item>\r\n          <van-collapse-item\r\n            title=\"什么是类的反射机制\"\r\n            name=\"8\"\r\n          >通过 Class对象，可以得出当前类的方法、构造方法、接口、父类等等信息，同时可以通过反射实例化一个类、设置属性、调用方法。</van-collapse-item>\r\n          <van-collapse-item title=\"static的使用\" name=\"9\">\r\n            静态方法不可以调用非静态的属性和方法\r\n            <br>非静态方法可以调用静态方法和属性\r\n          </van-collapse-item>\r\n          <van-collapse-item\r\n            title=\"写clone()方法时通常都有一行代码\"\r\n            name=\"10\"\r\n          >super.clone()，Clone有缺省行为，它负者产生正确的大小空间，并逐位复制</van-collapse-item>\r\n          <van-collapse-item\r\n            title=\"StringBuffer和StringBuilder的区别\"\r\n            name=\"11\"\r\n          >StringBuffer线程安全；StringBuilder效率更高，线程不安全；</van-collapse-item>\r\n          <van-collapse-item title=\"JAVA中都有那些IO流\" name=\"12\">\r\n            按单位可以分为字节流和字符流；\r\n            <br>按方向可以分为输入流和输出流；\r\n            <br>按功能可以分为高层流和低层流（低层流指一次只读取一个单位，而高层流一次可以读取一批单位）\r\n          </van-collapse-item>\r\n          <van-collapse-item title=\"JVM内存模型\" name=\"13\">\r\n            JVM内存模型包括执行引擎（垃圾回收，及时编译器，解释器）和运行时数据区和本地库接口\r\n            <br>运行时数据区包含：\r\n            <br>方法区（MethodArea）：存储类的信息，常量，静态变量，即时编译器编译后的代码。\r\n            <br>堆（Heap）：存放new出来的对象\r\n            <br>程序计数器（PC Register）：指向当前线程执行的字节码地址\r\n            <br>本地方法区（Native Method Stack）：可以调用本地方法\r\n            <br>虚拟机栈（JVM Stack）：存储方法的栈针，包括局部变量表，操作数栈，方法出口，动态链接等信息\r\n            <br>\r\n          </van-collapse-item>\r\n          <van-collapse-item title=\"集合有哪些接口\" name=\"15\">Colection接口和Map接口；Collection下包括Set和List接口</van-collapse-item>\r\n          <van-collapse-item title=\"ArrayList和LinkList区别\" name=\"16\">\r\n            ArrayList由数组实现，查找快速，插入和删除比较慢；\r\n            <br>LinkList由双向链表实现，插入和删除快，查询较慢，占用空间大，因为每一个元素都存放有指向下一个和上一个元素的指针。\r\n          </van-collapse-item>\r\n          <van-collapse-item title=\"Set的特点\" name=\"17\">存放的元素都是不重复的。（先比较HashCode()方法，再比较equal()方法）</van-collapse-item>\r\n          <van-collapse-item title=\"面向对象的特征有哪像\" name=\"18\">\r\n            封装：一个类包括多个属性及方法。\r\n            <br>多态：静态（重载、重写）动态（父类接受子类实例，接口接受实现实例 ）\r\n            <br>继承：类继承于父类，具有父类的所有属性与方法，可以重用，也可以覆盖。\r\n            <br>抽象：找共性，将共有的属性、方法放到父类中\r\n          </van-collapse-item>\r\n          <van-collapse-item title=\"如何定义一个线程\" name=\"19\">\r\n            实现Runable接口并重写run()方法;\r\n            <br>继承Thread类重写run()方法；\r\n            <br>启动线程使用start()方法；\r\n          </van-collapse-item>\r\n          <van-collapse-item title=\"wait和sleep的区别\" name=\"20\">\r\n            拥有的对象不同：wait()是Object的方法,sleep()是Thread的方法；\r\n            <br>wait()释放对象锁，且只能在同步代码块或同步方法中使用，可以通过notify唤醒；\r\n            <br>sleep()持有对象锁，只能等待设定时间结束，否则发生异常\r\n          </van-collapse-item>\r\n          <van-collapse-item title=\"jdk代理和cjlib代理的区别\" name=\"21\">\r\n            jdk代理实现InvocationHandler接口；jdk代理只能代理接口类\r\n            <br>cjlib代理实现MethodInterceptor接口；使用动态枝剪技术生成目标类子类来代理。\r\n          </van-collapse-item>\r\n          <van-collapse-item title=\"jdk1.8有哪些特性\" name=\"22\">\r\n            函式接口的使用\r\n            <br>Stream的使用\r\n            <br>LocalDateTime的使用\r\n            <br>Optional容器的使用\r\n          </van-collapse-item>\r\n          <van-collapse-item title=\"并发问题\" name=\"23\">\r\n            有序性、原子性、可见性\r\n            <br>volatile 修饰变量解决有序性和可见性问题；synchronzied 通过加锁解决有序性、可见性、原子性问题；\r\n          </van-collapse-item>\r\n          <van-collapse-item title=\"java中的类加载器\" name=\"24\">\r\n                1.引导类加载器；加载java的核心库\r\n                2.扩展类加载器；加载扩展类库(jre lib下的jar包)\r\n                3.系统类加载器；加载应用类路径下的类及jar包\r\n                4.自定义加载器\r\n          </van-collapse-item>\r\n           <van-collapse-item title=\"java值传递和引用传递\" name=\"25\">\r\n               值传递的是副本，不会改变地址；\r\n               引用传递的是引用地址。java中只用值传递。\r\n          </van-collapse-item>\r\n          <van-collapse-item title=\"for和forEach区别\" name=\"26\">\r\n               for通过index下标进行访问；forEach通过指针进行访问\r\n          </van-collapse-item>\r\n          <van-collapse-item title=\"乐观锁和悲观锁的区别\" name=\"27\">\r\n               悲观锁设计思路是当存在多个线程竞争一个资源的可能，首先会加上锁，阻止其他线程获得这个资源，直到他对资源修改完成。例如sychronized关键字<br>\r\n               乐观锁设计思路是当存在多个线程竞争一个资源的可能，首先会获取资源，然后修改资源，最后再看是否发生冲突。实现方式有CAS，版本号控制等。<br>\r\n               悲观锁用于资源冲突频繁的地方，乐观锁用多用于资源冲突较少的地方，相比悲观锁他的效率更高。\r\n          </van-collapse-item>\r\n          <van-collapse-item title=\"jvm的调优命令有哪些\" name=\"28\">\r\n               jstack 查看线程状态，分析出繁忙的线程在干嘛\r\n               jmap 查看内存信息，生成dump文件\r\n               jinfo 查看jvm参数和修改部分动态参数\r\n               jstat 查看jvm状态\r\n               jps 查看进程\r\n        \r\n          </van-collapse-item>\r\n        </van-collapse>\r\n        <van-collapse v-show=\"active==1\" v-model=\"activeName\" accordion>\r\n          <van-collapse-item title=\"SpringMVC流程\" name=\"1\">\r\n            用户请求->DispatcherServlet（前端控制器）->HandlerMapping（处理器映射器）‌->\r\n            HandlerAdapter（处理器适配器）-> DispatcherServlet（前端控制器）\r\n            <br>DispatcherServlet（前端控制器）-> 执行相应的业务（从数据库中获取数据 ModelAndView） ->\r\n            ViewResolver（视图解析器）-> DispatcherServlet（前端控制器）-> 返回给用户\r\n          </van-collapse-item>\r\n          <van-collapse-item title=\"依赖注入\" name=\"2\">\r\n            一种重要的设计模式，允许对象在不直接创建依赖的情况下使用，\r\n            通过spring容器来管理这些依赖。\r\n            <br>一般的可以通过构造器，setter方法及接口进行依赖注入\r\n          </van-collapse-item>\r\n          <van-collapse-item title=\"Spring中bean的生命周期\" name=\"3\">\r\n            bean对象的实例化;通过beanFactory工厂创建bean对象\r\n            <br>依赖注入;通过setter方法或者构造器进行\r\n            <br>初始化\r\n            <br>销毁\r\n            <br>这其中提供了许多钩子函数，比如初始化前的beanNameAware、beanFactoryAware提供容器信息。\r\n            beanPostProcessor提供ben初始化前后的自定义逻辑postProcessBeforeInitialization()、postProcessAfterInitialization()。\r\n            initalizingBean接口提供初始化后初始化逻辑。\r\n          </van-collapse-item>\r\n          <van-collapse-item title=\"spring常用的Annotation\" name=\"4\">\r\n            @Bean、@Value、@Controller、@Service、@Repository、@Configuration、@Autowired 、@Resource、\r\n            @Import、@Qualifier\r\n          </van-collapse-item>\r\n          <van-collapse-item title=\"Springboot如何实现类的配置加载\" name=\"5\">技术无非就是那些开发它的人的共同灵魂。</van-collapse-item>\r\n          <van-collapse-item title=\"Spring中事务失效\" name=\"6\">\r\n            1. @Transcation注解用到非public方法上修饰对的（springAop特性）\r\n            <br>2.由于数据库引擎不支持事务(如mysql的Mysiam)\r\n            <br>3. spring容器管理的bean才接受事务\r\n            <br>4. 当前类自身调用自己的方法\r\n            <br>5. 异常类错误类型（非运行时异常）\r\n          </van-collapse-item>\r\n          <van-collapse-item title=\"Spring如何解决循环依赖\" name=\"7\">三级缓存和延迟加载机制。（先在缓存中创建中创建纯净对象，延迟完成实例化）</van-collapse-item>\r\n          <van-collapse-item title=\"BeanFactory与ApplicationContext区别\" name=\"8\">\r\n                BeanFactory主要作用是bean的创建和读取；<br>\r\n                ApplicationContext继承于BeanFactory功能更丰富，国际化、aop、消息发送响应机制\r\n            </van-collapse-item>\r\n          <van-collapse-item title=\"Spring中支持bean作用域有哪些\" name=\"9\">\r\n                1.singleton; 单例模式 <br>\r\n                2.protoype; 原型模式 <br>\r\n                3.request; 每次http请求都会创建一个request <br>\r\n                4.session; 每次session会回都会有一个session域 <br>\r\n                5.global-session 所有的session会话都有一个gloabal-session域\r\n          </van-collapse-item>\r\n          <van-collapse-item title=\"@RequestParam和@RequestBody区别\" name=\"9\">\r\n                @RequestBody只接受请求体的格式请求，一般为Post请求 <br>\r\n                @RequestParam 只接受key-value的参数，一般为get请求\r\n          </van-collapse-item>\r\n          <van-collapse-item title=\"SpringCloud有哪些组件\" name=\"10\">\r\n               Eurake 注册中心<br>\r\n               Zuul 网关服务<br>\r\n               Feign 微服务之间的调用<br>\r\n               Ribbon 实现分布式服务时提供负载均衡策略<br>\r\n               Hystrix 提供熔断机制，实现服务隔离\r\n          </van-collapse-item>\r\n          <van-collapse-item title=\"Spring的特性\" name=\"11\">\r\n              1.IOC（控制反转）将创建对象的权利交由spring进行管理<br>\r\n              2.DI（依赖注入）允许对象在不直接创建依赖的情况下使用，通过spring容器来管理这些依赖。<br>\r\n              3.AOP（切面编程）不修改源代码的情况下对其进行增强，比如日志的记录。\r\n          </van-collapse-item>\r\n        </van-collapse>\r\n        <van-collapse v-show=\"active==2\" v-model=\"activeName\" accordion>\r\n          <van-collapse-item title=\"Redis的部署模式\" name=\"1\">\r\n              1.单机模式；即部署一台redis服务<br>\r\n              2.主从模式；即部署一个redis主服务器master，多个slave服务。主redis服务主要用于写，从服务用于读。主服务写完成同步更新到从服务<br>\r\n              3.Sentinel哨兵模式；避免主服务master出现不可用的情况<br>\r\n              4.集群模式\r\n          </van-collapse-item>\r\n          <van-collapse-item title=\"Redis的分区方案\" name=\"2\">\r\n              1.客户端分区，由客户端决定数据在哪个节点的存取<br>\r\n              2.代理分区；客户端将请求发送给代理，由代理决定数据存在什么分区<br>\r\n              3.查路由，客户端随机请求一个ridis实例，然后redis将请求转发给正确的redis节点\r\n          </van-collapse-item>\r\n          <van-collapse-item title=\"Redis的RDB与AOF模式优缺点\" name=\"3\">\r\n              RDB为快照模式，即某一时间点子线程会把redis所有的数据以文件形式存储到磁盘中。\r\n              这样主线程负责数据处理，而不影响子线程io处理。保证性能最大化。缺点是可能导致数据丢失。<br>\r\n              AOF为追加型模式，可以让每条命令都会以追加文件形式持久化，rewrite模式可以使文件过大时合并命令。\r\n              对于RDB来说更加安全。\r\n          </van-collapse-item>\r\n          <van-collapse-item title=\"Redis的缓冲穿透解决\" name=\"4\">\r\n              缓冲穿透指的是用户大量的访问数据库中没有的数据，导致系统崩溃或者响应变慢。<br>\r\n              1.可以设置键值为null的数据。<br>\r\n              2.使用布隆过滤器，在访问数据库之前过滤掉非法的key值\r\n          </van-collapse-item>\r\n           <van-collapse-item title=\"Redis的使用场景\" name=\"5\">\r\n              1.读多写少<br>\r\n              2.分布式锁<br>\r\n              3.字典类数据<br>\r\n              4.时效性数据, 比如验证码<br>\r\n              5.系统单点登陆存储用户信息<br>\r\n          </van-collapse-item>\r\n          <van-collapse-item title=\"为什么redis单线程效果好\" name=\"6\">\r\n              基于内存读写，使用nio的多路复用技术\r\n          </van-collapse-item>\r\n        </van-collapse>\r\n        <van-collapse v-show=\"active==3\" v-model=\"activeName\" accordion>\r\n          <van-collapse-item title=\"Mysql优化有哪些方式\" name=\"1\">\r\n                索引优化，当需要频繁作为条件使用的字段添加索引；<br>\r\n                多个条件时可以建立组合索引；<br>\r\n                使用explain来分析语句，避免多个条件时索引失效。<br>\r\n                使用缓冲存储热点数据，避免频繁使用数据库<br>\r\n          </van-collapse-item>\r\n          <van-collapse-item title=\"什么情况下索引会失效\" name=\"2\">\r\n                组合索引时没有遵循最左索引原则<br>\r\n                查询条件使用不等号（not）、or、like<br>\r\n                在索引列上进行相关计算<br>\r\n          </van-collapse-item>\r\n          <van-collapse-item title=\"Mysql的引擎有哪些\" name=\"3\">\r\n                InnoDB;事务型存储引擎，并且有较高并发的读取效率<br>\r\n                MyISAM;不支持事务处理和行级锁，特点简单、快速、小巧<br>\r\n                MEMORY;存储引擎，存放在内存中，数据量小，读取块<br>\r\n                ARCHIVE;归档，有很好的压缩机制<br>\r\n                CSV;紧凑数据块,支持CSV格式数据文件,常用于其他软件或数据库中导入数据\r\n          </van-collapse-item>\r\n          <van-collapse-item title=\"聚簇索引与非聚簇索引\" name=\"4\">\r\n                聚簇索引指的是值与索引都是一样的，找到索引就找到值了，一般主键都是聚簇索引<br>\r\n                非聚簇索引，索引与值非开存储，查询时需要先查到索引然后再根据索引查询值<br>\r\n          </van-collapse-item>\r\n        </van-collapse>\r\n        <van-collapse v-show=\"active==4\" v-model=\"activeName\" accordion>\r\n          <van-collapse-item title=\"Redis和Mysql数据不一致\" name=\"1\">\r\n              \r\n          </van-collapse-item>\r\n          <van-collapse-item title=\"登陆模块的步骤\" name=\"2\">\r\n              1.用户登陆信息验证<br>\r\n              2.给用户发送token<br>\r\n              3.之后的信息传输对token进验证\r\n          </van-collapse-item>\r\n           <van-collapse-item title=\"cookie和session的区别\" name=\"3\">\r\n              1.cookie是存储在客户端中,session存储在服务器中<br>\r\n              2.cookie可以在客户端中持久化存储,而对话结束后session会销毁<br>\r\n              3.cookie存储的数据量较小,而session可存储数据量大\r\n          </van-collapse-item>\r\n          <van-collapse-item title=\"高并发时对系统的保护措施\" name=\"4\">\r\n              1.对服务器引入缓存机制;如redis,避免频繁访问数据库<br>\r\n              2.网关上可以作限流或者降级处理<br>\r\n              3.使用消息队列中间部件，实现削峰填谷\r\n          </van-collapse-item>\r\n          <van-collapse-item title=\"当超时订单未完成支付时如何处理\" name=\"5\">\r\n              消息投入到死信队列中，到达时间后，死信交换机将消息投递到消费队列，\r\n              消费队列查找没有支付订单则删除该订单。\r\n          </van-collapse-item>\r\n        </van-collapse>\r\n      </van-col>\r\n    </van-row>\r\n  </div>\r\n</template>\r\n<script>\r\n// import { showToast } from \"vant\";\r\nexport default {\r\n  data() {\r\n    return {\r\n      activeName: \"-1\",\r\n      active: \"0\"\r\n    };\r\n  },\r\n  methods: {\r\n    onChange(index) {\r\n      this.active = index;\r\n      // showToast(index);\r\n    }\r\n  }\r\n};\r\n</script>\r\n<style scoped>\r\n#home .van-collapse-item__content {\r\n  color: rgba(226, 63, 13, 0.637);\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}