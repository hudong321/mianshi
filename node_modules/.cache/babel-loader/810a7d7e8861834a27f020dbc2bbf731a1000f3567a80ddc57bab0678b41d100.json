{"ast":null,"code":"// import { showToast } from \"vant\";\nexport default {\n  data() {\n    return {\n      activeName: \"-1\",\n      active: \"0\"\n    };\n  },\n  methods: {\n    onChange(index) {\n      this.active = index;\n      // showToast(index);\n    }\n  }\n};","map":{"version":3,"names":["data","activeName","active","methods","onChange","index"],"sources":["G:\\Workspace\\CoderWorkspace\\antd-demo\\src\\components\\HomePage.vue"],"sourcesContent":["<template>\r\n  <div id=\"home\">\r\n    <van-row>\r\n      <van-col span=\"5\">\r\n        <van-sidebar v-model=\"active\" @change=\"onChange\">\r\n          <van-sidebar-item title=\"JAVA基础\"/>\r\n          <van-sidebar-item title=\"SPRING相关\"/>\r\n          <van-sidebar-item title=\"标签名称\"/>\r\n        </van-sidebar>\r\n      </van-col>\r\n      <van-col span=\"19\">\r\n        <van-collapse v-show=\"active==0\" v-model=\"activeName\" accordion>\r\n          <van-collapse-item\r\n            title=\"JAVA基本数据类型有那些\"\r\n            name=\"1\"\r\n          >四类八种，整形（byte,short,int,long），浮点型（float,double），char类型，boolean类型</van-collapse-item>\r\n          <van-collapse-item title=\"JAVA的访问修饰符及访问范围\" name=\"2\">\r\n            public可以访问任何地方\r\n            <br>protected可以访问当前类所在包和其子类\r\n            <br>default可以访问当前类所在包\r\n            <br>private只可以访问当前类内部\r\n          </van-collapse-item>\r\n          <van-collapse-item title=\"重载与重写的区别\" name=\"3\">\r\n              重载（overload）:\r\n              只发生在同一个类中，方法名必须相同，方法参数需不一致。与访问修饰符与返回值类型无关<br>\r\n              重写（overwrite）：\r\n              发生在父子类中，方法名与父类方法名相同，方法参数个数类型及返回值类型一致，抛出异常范围不大于父类，访问修饰符不小于父类。\r\n          </van-collapse-item>\r\n          <van-collapse-item title=\"Final类的特点\" name=\"4\">final修饰的类不能继承；final修饰的方法不能重写；final修饰的属性不能修改</van-collapse-item>\r\n          <van-collapse-item title=\"类的加载过程\" name=\"5\">\r\n\r\n          </van-collapse-item>\r\n          <van-collapse-item title=\"什么是垃圾处理\" name=\"6\">\r\n            垃圾收集是将分配给对象但不再使用的内存回收或释放的过程。如果一个对象没有指向它的引用或者其赋值为null,则次对象适合进行垃圾回收</van-collapse-item>\r\n          <van-collapse-item title=\"抽象类和接口的区别\" name=\"7\">\r\n            抽象类：抽象类单继承，不仅可以有抽象方法也可以有自己实现的方法<br>\r\n            接口：接口多实现，一般接口只有抽象方法。\r\n          </van-collapse-item>\r\n          <van-collapse-item title=\"什么是类的反射机制\" name=\"8\">\r\n             通过 Class对象，可以得出当前类的方法、构造方法、接口、父类等等信息，同时可以通过反射实例化一个类、设置属性、调用方法。\r\n          </van-collapse-item>\r\n          <van-collapse-item title=\"static的使用\" name=\"9\">\r\n               静态方法不可以调用非静态的属性和方法 <br>\r\n               非静态方法可以调用静态方法和属性\r\n          </van-collapse-item>\r\n          <van-collapse-item title=\"写clone()方法时通常都有一行代码\" name=\"10\">\r\n              super.clone()，Clone有缺省行为，它负者产生正确的大小空间，并逐位复制\r\n          </van-collapse-item>\r\n          <van-collapse-item title=\"StringBuffer和StringBuilder的区别\" name=\"11\">\r\n              StringBuffer线程安全；StringBuilder效率更高，线程不安全；\r\n          </van-collapse-item>\r\n          <van-collapse-item title=\"JAVA中都有那些IO流\" name=\"12\">\r\n                按单位可以分为字节流和字符流；<br>\r\n                按方向可以分为输入流和输出流；<br>\r\n                按功能可以分为上部流和下部流（下部流指一次只读取一个单位，而上部流一次可以读取一批单位）\r\n          </van-collapse-item>\r\n          <van-collapse-item title=\"JVM内存模型\" name=\"13\">\r\n              JVM内存模型包括执行引擎（垃圾回收，及时编译器，解释器）和运行时数据区和本地库接口<br>\r\n              运行时数据区包含：<br>\r\n              方法区（MethodArea）：存储类的信息，常量，静态变量，即时编译器编译后的代码。 <br>\r\n              堆（Heap）：存放new出来的对象 <br>\r\n              程序计数器（PC Register）：指向当前线程执行的字节码地址 <br>\r\n              本地方法区（Native Method Stack）：可以调用本地方法 <br>\r\n              虚拟机栈（JVM Stack）：存储方法的栈针，包括局部变量表，操作数栈，方法出口，动态链接等信息 <br>\r\n          </van-collapse-item>\r\n          <van-collapse-item title=\"集合有哪些接口\" name=\"15\">\r\n               Colection接口和Map接口；Collection下包括Set和List接口\r\n          </van-collapse-item>\r\n          <van-collapse-item title=\"ArrayList和LinkList区别\" name=\"16\">\r\n               ArrayList由数组实现，查找快速，插入和删除比较慢；<br>\r\n               LinkList由双向链表实现，插入和删除快，查询较慢，占用空间大，因为每一个元素都存放有指向下一个和上一个元素的指针。\r\n          </van-collapse-item>\r\n          <van-collapse-item title=\"Set的特点\" name=\"17\">\r\n              存放的元素都是不相同的。\r\n          </van-collapse-item>\r\n          <van-collapse-item title=\"抽象类和接口的区别\" name=\"18\"></van-collapse-item>\r\n        </van-collapse>\r\n        <van-collapse v-show=\"active==1\" v-model=\"activeName\" accordion>\r\n          <van-collapse-item title=\"标题1\" name=\"1\">1代码是写出来给人看的，附带能在机器上运行。</van-collapse-item>\r\n          <van-collapse-item title=\"标题2\" name=\"2\">技术无非就是那些开发它的人的共同灵魂。</van-collapse-item>\r\n          <van-collapse-item title=\"标题3\" name=\"3\">在代码阅读过程中人们说脏话的频率是衡量代码质量的唯一标准。</van-collapse-item>\r\n        </van-collapse>\r\n      </van-col>\r\n    </van-row>\r\n  </div>\r\n</template>\r\n<script>\r\n// import { showToast } from \"vant\";\r\nexport default {\r\n  data() {\r\n    return {\r\n      activeName: \"-1\",\r\n      active: \"0\"\r\n    };\r\n  },\r\n  methods: {\r\n    onChange(index) {\r\n      this.active = index;\r\n      // showToast(index);\r\n    }\r\n  }\r\n};\r\n</script>\r\n<style scoped>\r\n#home .van-collapse-item__content {\r\n  color: rgba(226, 63, 13, 0.637);\r\n}\r\n</style>\r\n"],"mappings":"AAuFA;AACA,eAAe;EACbA,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,UAAU,EAAE,IAAI;MAChBC,MAAM,EAAE;IACV,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACPC,QAAQA,CAACC,KAAK,EAAE;MACd,IAAI,CAACH,MAAK,GAAIG,KAAK;MACnB;IACF;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}