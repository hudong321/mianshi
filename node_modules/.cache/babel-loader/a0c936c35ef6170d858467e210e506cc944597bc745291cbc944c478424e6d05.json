{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, createTextVNode as _createTextVNode, createElementVNode as _createElementVNode, vShow as _vShow, withDirectives as _withDirectives, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  id: \"home\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_van_sidebar_item = _resolveComponent(\"van-sidebar-item\");\n  const _component_van_sidebar = _resolveComponent(\"van-sidebar\");\n  const _component_van_col = _resolveComponent(\"van-col\");\n  const _component_van_collapse_item = _resolveComponent(\"van-collapse-item\");\n  const _component_van_collapse = _resolveComponent(\"van-collapse\");\n  const _component_van_row = _resolveComponent(\"van-row\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createVNode(_component_van_row, null, {\n    default: _withCtx(() => [_createVNode(_component_van_col, {\n      span: \"5\"\n    }, {\n      default: _withCtx(() => [_createVNode(_component_van_sidebar, {\n        modelValue: $data.active,\n        \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.active = $event),\n        onChange: $options.onChange\n      }, {\n        default: _withCtx(() => [_createVNode(_component_van_sidebar_item, {\n          title: \"JAVA基础\"\n        }), _createVNode(_component_van_sidebar_item, {\n          title: \"SPRING相关\"\n        }), _createVNode(_component_van_sidebar_item, {\n          title: \"Redis相关\"\n        }), _createVNode(_component_van_sidebar_item, {\n          title: \"Mysql相关\"\n        }), _createVNode(_component_van_sidebar_item, {\n          title: \"VUE相关\"\n        }), _createVNode(_component_van_sidebar_item, {\n          title: \"场景\"\n        })]),\n        _: 1 /* STABLE */\n      }, 8 /* PROPS */, [\"modelValue\", \"onChange\"])]),\n      _: 1 /* STABLE */\n    }), _createVNode(_component_van_col, {\n      span: \"19\"\n    }, {\n      default: _withCtx(() => [_withDirectives(_createVNode(_component_van_collapse, {\n        modelValue: $data.activeName,\n        \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.activeName = $event),\n        accordion: \"\"\n      }, {\n        default: _withCtx(() => [_createVNode(_component_van_collapse_item, {\n          title: \"JAVA基本数据类型有那些\",\n          name: \"1\"\n        }, {\n          default: _withCtx(() => _cache[7] || (_cache[7] = [_createTextVNode(\"四类八种，整形（byte,short,int,long），浮点型（float,double），char类型，boolean类型\")])),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_van_collapse_item, {\n          title: \"JAVA的访问修饰符及访问范围\",\n          name: \"2\"\n        }, {\n          default: _withCtx(() => _cache[8] || (_cache[8] = [_createTextVNode(\" public可以访问任何地方 \"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\"protected可以访问当前类所在包和其子类 \"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\"default可以访问当前类所在包 \"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\"private只可以访问当前类内部 \")])),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_van_collapse_item, {\n          title: \"重载与重写的区别\",\n          name: \"3\"\n        }, {\n          default: _withCtx(() => _cache[9] || (_cache[9] = [_createTextVNode(\" 重载（overload）: 只发生在同一个类中，方法名必须相同，方法参数需不一致。与访问修饰符与返回值类型无关 \"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\"重写（overwrite）： 发生在父子类中，方法名与父类方法名相同，方法参数个数类型及返回值类型一致，抛出异常范围不大于父类，访问修饰符不小于父类。 \")])),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_van_collapse_item, {\n          title: \"Final类的特点\",\n          name: \"4\"\n        }, {\n          default: _withCtx(() => _cache[10] || (_cache[10] = [_createTextVNode(\"final修饰的类不能继承；final修饰的方法不能重写；final修饰的属性不能修改\")])),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_van_collapse_item, {\n          title: \"类的加载过程\",\n          name: \"5\"\n        }, {\n          default: _withCtx(() => _cache[11] || (_cache[11] = [_createTextVNode(\" 类加载按需加载，当需要一个类时，类加载器会将类的字节码文件加载到内存中，放到方法区，生成此类的模板。而类加载器会 使用双亲委派的模式，避免此类重复加载。\"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\" 而类加载一般有类加载->链接（验证、准备、解析）->初始化几个过程 \")])),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_van_collapse_item, {\n          title: \"什么是垃圾处理\",\n          name: \"6\"\n        }, {\n          default: _withCtx(() => _cache[12] || (_cache[12] = [_createTextVNode(\"垃圾收集是将分配给对象但不再使用的内存回收或释放的过程。如果一个对象没有指向它的引用或者其赋值为null,则次对象适合进行垃圾回收\")])),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_van_collapse_item, {\n          title: \"抽象类和接口的区别\",\n          name: \"7\"\n        }, {\n          default: _withCtx(() => _cache[13] || (_cache[13] = [_createTextVNode(\" 抽象类：抽象类单继承，不仅可以有抽象方法也可以有自己实现的方法 \"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\"接口：接口多实现，一般接口只有抽象方法。 \")])),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_van_collapse_item, {\n          title: \"什么是类的反射机制\",\n          name: \"8\"\n        }, {\n          default: _withCtx(() => _cache[14] || (_cache[14] = [_createTextVNode(\"通过 Class对象，可以得出当前类的方法、构造方法、接口、父类等等信息，同时可以通过反射实例化一个类、设置属性、调用方法。\")])),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_van_collapse_item, {\n          title: \"static的使用\",\n          name: \"9\"\n        }, {\n          default: _withCtx(() => _cache[15] || (_cache[15] = [_createTextVNode(\" 静态方法不可以调用非静态的属性和方法 \"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\"非静态方法可以调用静态方法和属性 \")])),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_van_collapse_item, {\n          title: \"写clone()方法时通常都有一行代码\",\n          name: \"10\"\n        }, {\n          default: _withCtx(() => _cache[16] || (_cache[16] = [_createTextVNode(\"super.clone()，Clone有缺省行为，它负者产生正确的大小空间，并逐位复制\")])),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_van_collapse_item, {\n          title: \"StringBuffer和StringBuilder的区别\",\n          name: \"11\"\n        }, {\n          default: _withCtx(() => _cache[17] || (_cache[17] = [_createTextVNode(\"StringBuffer线程安全；StringBuilder效率更高，线程不安全；\")])),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_van_collapse_item, {\n          title: \"JAVA中都有那些IO流\",\n          name: \"12\"\n        }, {\n          default: _withCtx(() => _cache[18] || (_cache[18] = [_createTextVNode(\" 按单位可以分为字节流和字符流； \"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\"按方向可以分为输入流和输出流； \"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\"按功能可以分为高层流和低层流（低层流指一次只读取一个单位，而高层流一次可以读取一批单位） \")])),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_van_collapse_item, {\n          title: \"JVM内存模型\",\n          name: \"13\"\n        }, {\n          default: _withCtx(() => _cache[19] || (_cache[19] = [_createTextVNode(\" JVM内存模型包括执行引擎（垃圾回收，及时编译器，解释器）和运行时数据区和本地库接口 \"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\"运行时数据区包含： \"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\"方法区（MethodArea）：存储类的信息，常量，静态变量，即时编译器编译后的代码。 \"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\"堆（Heap）：存放new出来的对象 \"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\"程序计数器（PC Register）：指向当前线程执行的字节码地址 \"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\"本地方法区（Native Method Stack）：可以调用本地方法 \"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\"虚拟机栈（JVM Stack）：存储方法的栈针，包括局部变量表，操作数栈，方法出口，动态链接等信息 \"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */)])),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_van_collapse_item, {\n          title: \"集合有哪些接口\",\n          name: \"15\"\n        }, {\n          default: _withCtx(() => _cache[20] || (_cache[20] = [_createTextVNode(\"Colection接口和Map接口；Collection下包括Set和List接口\")])),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_van_collapse_item, {\n          title: \"ArrayList和LinkList区别\",\n          name: \"16\"\n        }, {\n          default: _withCtx(() => _cache[21] || (_cache[21] = [_createTextVNode(\" ArrayList由数组实现，查找快速，插入和删除比较慢； \"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\"LinkList由双向链表实现，插入和删除快，查询较慢，占用空间大，因为每一个元素都存放有指向下一个和上一个元素的指针。 \")])),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_van_collapse_item, {\n          title: \"Set的特点\",\n          name: \"17\"\n        }, {\n          default: _withCtx(() => _cache[22] || (_cache[22] = [_createTextVNode(\"存放的元素都是不重复的。（先比较HashCode()方法，再比较equal()方法）\")])),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_van_collapse_item, {\n          title: \"面向对象的特征有哪像\",\n          name: \"18\"\n        }, {\n          default: _withCtx(() => _cache[23] || (_cache[23] = [_createTextVNode(\" 封装：一个类包括多个属性及方法。 \"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\"多态：静态（重载、重写）动态（父类接受子类实例，接口接受实现实例 ） \"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\"继承：类继承于父类，具有父类的所有属性与方法，可以重用，也可以覆盖。 \"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\"抽象：找共性，将共有的属性、方法放到父类中 \")])),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_van_collapse_item, {\n          title: \"如何定义一个线程\",\n          name: \"19\"\n        }, {\n          default: _withCtx(() => _cache[24] || (_cache[24] = [_createTextVNode(\" 实现Runable接口并重写run()方法; \"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\"继承Thread类重写run()方法； \"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\"启动线程使用start()方法； \")])),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_van_collapse_item, {\n          title: \"wait和sleep的区别\",\n          name: \"20\"\n        }, {\n          default: _withCtx(() => _cache[25] || (_cache[25] = [_createTextVNode(\" 拥有的对象不同：wait()是Object的方法,sleep()是Thread的方法； \"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\"wait()释放对象锁，且只能在同步代码块或同步方法中使用，可以通过notify唤醒； \"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\"sleep()持有对象锁，只能等待设定时间结束，否则发生异常 \")])),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_van_collapse_item, {\n          title: \"jdk代理和cjlib代理的区别\",\n          name: \"21\"\n        }, {\n          default: _withCtx(() => _cache[26] || (_cache[26] = [_createTextVNode(\" jdk代理实现InvocationHandler接口；jdk代理只能代理接口类 \"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\"cjlib代理实现MethodInterceptor接口；使用动态枝剪技术生成目标类子类来代理。 \")])),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_van_collapse_item, {\n          title: \"jdk1.8有哪些特性\",\n          name: \"22\"\n        }, {\n          default: _withCtx(() => _cache[27] || (_cache[27] = [_createTextVNode(\" 函式接口的使用 \"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\"Stream的使用 \"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\"LocalDateTime的使用 \"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\"Optional容器的使用 \")])),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_van_collapse_item, {\n          title: \"并发问题\",\n          name: \"23\"\n        }, {\n          default: _withCtx(() => _cache[28] || (_cache[28] = [_createTextVNode(\" 有序性、原子性、可见性 \"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\"volatile 修饰变量解决有序性和可见性问题；synchronzied 通过加锁解决有序性、可见性、原子性问题； \")])),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_van_collapse_item, {\n          title: \"java中的类加载器\",\n          name: \"24\"\n        }, {\n          default: _withCtx(() => _cache[29] || (_cache[29] = [_createTextVNode(\" 1.引导类加载器；加载java的核心库 2.扩展类加载器；加载扩展类库(jre lib下的jar包) 3.系统类加载器；加载应用类路径下的类及jar包 4.自定义加载器 \")])),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_van_collapse_item, {\n          title: \"java值传递和引用传递\",\n          name: \"25\"\n        }, {\n          default: _withCtx(() => _cache[30] || (_cache[30] = [_createTextVNode(\" 值传递的是副本，不会改变地址； 引用传递的是引用地址。java中只用值传递。 \")])),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_van_collapse_item, {\n          title: \"for和forEach区别\",\n          name: \"26\"\n        }, {\n          default: _withCtx(() => _cache[31] || (_cache[31] = [_createTextVNode(\" for通过index下标进行访问；forEach通过指针进行访问 \")])),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_van_collapse_item, {\n          title: \"乐观锁和悲观锁的区别\",\n          name: \"27\"\n        }, {\n          default: _withCtx(() => _cache[32] || (_cache[32] = [_createTextVNode(\" 悲观锁设计思路是当存在多个线程竞争一个资源的可能，首先会加上锁，阻止其他线程获得这个资源，直到他对资源修改完成。例如sychronized关键字\"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\" 乐观锁设计思路是当存在多个线程竞争一个资源的可能，首先会获取资源，然后修改资源，最后再看是否发生冲突。实现方式有CAS，版本号控制等。\"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\" 乐观锁用多用于读多写少，相比悲观锁他的效率更高。 \")])),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_van_collapse_item, {\n          title: \"jvm的调优命令有哪些\",\n          name: \"28\"\n        }, {\n          default: _withCtx(() => _cache[33] || (_cache[33] = [_createTextVNode(\" jstack 查看线程状态，分析出繁忙的线程在干嘛 jmap 查看内存信息，生成dump文件 jinfo 查看jvm参数和修改部分动态参数 jstat 查看jvm状态 jps 查看进程 \")])),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_van_collapse_item, {\n          title: \"事物的传播行为\",\n          name: \"29\"\n        }, {\n          default: _withCtx(() => _cache[34] || (_cache[34] = [_createTextVNode(\" 1.request 支持事物，若存在事物，会加入到这个事物当中；若不存在事物，会新建一个事物\"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\" 2.request_new 无论当前是否存在事物，都会新建一个事物，若存在事物，会当前事物挂起\"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\" 3.support 支持事物，若当前存在事物，会加入事物中；若不存在以非事物形式运行\"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\" 4.not_support 不支持事物，不论是否存在事物；以非事物形式运行 \"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\" 5.mandatory 必须支持事物，若当前不存在事物；会抛出异常\"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\" 6.never 不支持事物，若当前存在事物，会抛出异常；若不存在以非事物形式运行\"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\" 7.nested 嵌套事物，会在当前事物内部开启新的事物。 \")])),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_van_collapse_item, {\n          title: \"事物的特性\",\n          name: \"30\"\n        }, {\n          default: _withCtx(() => _cache[35] || (_cache[35] = [_createTextVNode(\" 1.原子行 一个事物所有的操作要不是提交，要不就是回滚\"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\" 2.一致性 事物执行时数据库的所有约束原则保持一致\"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\" 3.永久性 事物数据一旦提交，永远保存在数据库中\"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\" 4.隔离性 事物之间互不干扰\"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */)])),\n          _: 1 /* STABLE */\n        })]),\n        _: 1 /* STABLE */\n      }, 8 /* PROPS */, [\"modelValue\"]), [[_vShow, $data.active == 0]]), _withDirectives(_createVNode(_component_van_collapse, {\n        modelValue: $data.activeName,\n        \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => $data.activeName = $event),\n        accordion: \"\"\n      }, {\n        default: _withCtx(() => [_createVNode(_component_van_collapse_item, {\n          title: \"SpringMVC流程\",\n          name: \"1\"\n        }, {\n          default: _withCtx(() => _cache[36] || (_cache[36] = [_createTextVNode(\" 用户请求->DispatcherServlet（前端控制器）->HandlerMapping（处理器映射器）‌-> HandlerAdapter（处理器适配器）-> DispatcherServlet（前端控制器） \"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\"DispatcherServlet（前端控制器）-> 执行相应的业务（从数据库中获取数据 ModelAndView） -> ViewResolver（视图解析器）-> DispatcherServlet（前端控制器）-> 返回给用户 \")])),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_van_collapse_item, {\n          title: \"依赖注入\",\n          name: \"2\"\n        }, {\n          default: _withCtx(() => _cache[37] || (_cache[37] = [_createTextVNode(\" 一种重要的设计模式，允许对象在不直接创建依赖的情况下使用， 通过spring容器来管理这些依赖。 \"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\"一般的可以通过构造器，setter方法及接口进行依赖注入 \")])),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_van_collapse_item, {\n          title: \"Spring中bean的生命周期\",\n          name: \"3\"\n        }, {\n          default: _withCtx(() => _cache[38] || (_cache[38] = [_createTextVNode(\" bean对象的实例化;通过beanFactory工厂创建bean对象 \"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\"依赖注入;通过setter方法或者构造器进行 \"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\"初始化 \"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\"销毁 \"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\"这其中提供了许多钩子函数，比如初始化前的beanNameAware、beanFactoryAware提供容器信息。 beanPostProcessor提供ben初始化前后的自定义逻辑postProcessBeforeInitialization()、postProcessAfterInitialization()。 initalizingBean实现自定义初始化逻辑\"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\" 实例化 → 属性填充 → BeanNameAware → BeanFactoryAware → 前置处理器 → @PostConstruct → 初始化方法 → 后置处理器 → 使用中 → @PreDestroy → 销毁。 \")])),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_van_collapse_item, {\n          title: \"spring常用的Annotation\",\n          name: \"4\"\n        }, {\n          default: _withCtx(() => _cache[39] || (_cache[39] = [_createTextVNode(\" @Bean、@Value、@Controller、@Service、@Repository、@Configuration、@Autowired 、@Resource、 @Import、@Qualifier \")])),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_van_collapse_item, {\n          title: \"Springboot自动装配原理\",\n          name: \"5\"\n        }, {\n          default: _withCtx(() => _cache[40] || (_cache[40] = [_createTextVNode(\" 基于@EnableAutoConfiguration扫描META-INF/spring.factories中的配置类，条件注解（如@ConditionalOnClass）控制是否生效。\"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\" 自定义Starter： 创建配置类+spring.factories，定义条件化Bean。 \")])),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_van_collapse_item, {\n          title: \"Spring中事务失效\",\n          name: \"6\"\n        }, {\n          default: _withCtx(() => _cache[41] || (_cache[41] = [_createTextVNode(\" 1. @Transcation注解用到非public方法上修饰对的（springAop特性） \"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\"2.由于数据库引擎不支持事务(如mysql的Mysiam) \"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\"3. spring容器管理的bean才接受事务 \"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\"4. 当前类自身调用自己的方法 \"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\"5. 异常类错误类型（非运行时异常） \")])),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_van_collapse_item, {\n          title: \"Spring如何解决循环依赖\",\n          name: \"7\"\n        }, {\n          default: _withCtx(() => _cache[42] || (_cache[42] = [_createTextVNode(\"三级缓存和延迟加载机制。（先在缓存中创建中创建纯净对象，延迟完成实例化）\")])),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_van_collapse_item, {\n          title: \"BeanFactory与ApplicationContext区别\",\n          name: \"8\"\n        }, {\n          default: _withCtx(() => _cache[43] || (_cache[43] = [_createTextVNode(\" BeanFactory主要作用是bean的创建和读取；\"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\" ApplicationContext继承于BeanFactory功能更丰富，国际化、aop、消息发送响应机制 \")])),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_van_collapse_item, {\n          title: \"Spring中支持bean作用域有哪些\",\n          name: \"9\"\n        }, {\n          default: _withCtx(() => _cache[44] || (_cache[44] = [_createTextVNode(\" 1.singleton; 单例模式 \"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\" 2.protoype; 原型模式 \"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\" 3.request; 每次http请求都会创建一个request \"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\" 4.session; 每次session会回都会有一个session域 \"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\" 5.global-session 所有的session会话都有一个gloabal-session域 \")])),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_van_collapse_item, {\n          title: \"@RequestParam和@RequestBody区别\",\n          name: \"9\"\n        }, {\n          default: _withCtx(() => _cache[45] || (_cache[45] = [_createTextVNode(\" @RequestBody只接受请求体的格式请求，一般为Post请求 \"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\" @RequestParam 只接受key-value的参数，一般为get请求 \")])),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_van_collapse_item, {\n          title: \"SpringCloud有哪些组件\",\n          name: \"10\"\n        }, {\n          default: _withCtx(() => _cache[46] || (_cache[46] = [_createTextVNode(\" Eurake 注册中心\"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\" Zuul 网关服务\"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\" Feign 微服务之间的调用\"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\" Ribbon 实现分布式服务时提供负载均衡策略\"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\" Hystrix 提供熔断机制，实现服务隔离 \")])),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_van_collapse_item, {\n          title: \"Spring的特性\",\n          name: \"11\"\n        }, {\n          default: _withCtx(() => _cache[47] || (_cache[47] = [_createTextVNode(\" 1.IOC（控制反转）将创建对象的权利交由spring进行管理\"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\" 2.DI（依赖注入）允许对象在不直接创建依赖的情况下使用，通过spring容器来管理这些依赖。\"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\" 3.AOP（切面编程）不修改源代码的情况下对其进行增强，比如日志的记录。 \")])),\n          _: 1 /* STABLE */\n        })]),\n        _: 1 /* STABLE */\n      }, 8 /* PROPS */, [\"modelValue\"]), [[_vShow, $data.active == 1]]), _withDirectives(_createVNode(_component_van_collapse, {\n        modelValue: $data.activeName,\n        \"onUpdate:modelValue\": _cache[3] || (_cache[3] = $event => $data.activeName = $event),\n        accordion: \"\"\n      }, {\n        default: _withCtx(() => [_createVNode(_component_van_collapse_item, {\n          title: \"Redis的部署模式\",\n          name: \"1\"\n        }, {\n          default: _withCtx(() => _cache[48] || (_cache[48] = [_createTextVNode(\" 1.单机模式；即部署一台redis服务\"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\" 2.主从模式；即部署一个redis主服务器master，多个slave服务。主redis服务主要用于写，从服务用于读。主服务写完成同步更新到从服务\"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\" 3.Sentinel哨兵模式；避免主服务master出现不可用的情况\"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\" 4.集群模式 \")])),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_van_collapse_item, {\n          title: \"Redis的分区方案\",\n          name: \"2\"\n        }, {\n          default: _withCtx(() => _cache[49] || (_cache[49] = [_createTextVNode(\" 1.客户端分区，由客户端决定数据在哪个节点的存取\"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\" 2.代理分区；客户端将请求发送给代理，由代理决定数据存在什么分区\"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\" 3.查路由，客户端随机请求一个ridis实例，然后redis将请求转发给正确的redis节点 \")])),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_van_collapse_item, {\n          title: \"Redis的RDB与AOF模式优缺点\",\n          name: \"3\"\n        }, {\n          default: _withCtx(() => _cache[50] || (_cache[50] = [_createTextVNode(\" RDB为快照模式，即某一时间点子线程会把redis所有的数据以文件形式存储到磁盘中。 这样主线程负责数据处理，而不影响子线程io处理。保证性能最大化。缺点是可能导致数据丢失。\"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\" AOF为追加型模式，可以让每条命令都会以追加文件形式持久化，rewrite模式可以使文件过大时合并命令。 对于RDB来说更加安全。 \")])),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_van_collapse_item, {\n          title: \"Redis的缓冲穿透解决\",\n          name: \"4\"\n        }, {\n          default: _withCtx(() => _cache[51] || (_cache[51] = [_createTextVNode(\" 缓冲穿透指的是用户大量的访问数据库中没有的数据，导致系统崩溃或者响应变慢。\"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\" 1.可以设置键值为null的数据。\"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\" 2.使用布隆过滤器，在访问数据库之前过滤掉非法的key值 \")])),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_van_collapse_item, {\n          title: \"Redis的使用场景\",\n          name: \"5\"\n        }, {\n          default: _withCtx(() => _cache[52] || (_cache[52] = [_createTextVNode(\" 1.读多写少\"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\" 2.分布式锁\"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\" 3.字典类数据\"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\" 4.时效性数据, 比如验证码\"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\" 5.系统单点登陆存储用户信息\"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */)])),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_van_collapse_item, {\n          title: \"为什么redis单线程效果好\",\n          name: \"6\"\n        }, {\n          default: _withCtx(() => _cache[53] || (_cache[53] = [_createTextVNode(\" 基于内存读写，使用nio的多路复用技术 \")])),\n          _: 1 /* STABLE */\n        })]),\n        _: 1 /* STABLE */\n      }, 8 /* PROPS */, [\"modelValue\"]), [[_vShow, $data.active == 2]]), _withDirectives(_createVNode(_component_van_collapse, {\n        modelValue: $data.activeName,\n        \"onUpdate:modelValue\": _cache[4] || (_cache[4] = $event => $data.activeName = $event),\n        accordion: \"\"\n      }, {\n        default: _withCtx(() => [_createVNode(_component_van_collapse_item, {\n          title: \"Mysql优化有哪些方式\",\n          name: \"1\"\n        }, {\n          default: _withCtx(() => _cache[54] || (_cache[54] = [_createTextVNode(\" 索引优化，当需要频繁作为条件使用的字段添加索引；\"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\" 多个条件时可以建立组合索引；\"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\" 使用explain来分析语句，避免多个条件时索引失效。\"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\" 使用缓冲存储热点数据，避免频繁使用数据库\"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */)])),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_van_collapse_item, {\n          title: \"什么情况下索引会失效\",\n          name: \"2\"\n        }, {\n          default: _withCtx(() => _cache[55] || (_cache[55] = [_createTextVNode(\" 组合索引时没有遵循最左索引原则\"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\" 查询条件使用不等号（not）、or、like\"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\" 在索引列上进行相关计算\"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */)])),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_van_collapse_item, {\n          title: \"Mysql的引擎有哪些\",\n          name: \"3\"\n        }, {\n          default: _withCtx(() => _cache[56] || (_cache[56] = [_createTextVNode(\" InnoDB;事务型存储引擎，并且有较高并发的读取效率\"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\" MyISAM;不支持事务处理和行级锁，特点简单、快速、小巧\"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\" MEMORY;存储引擎，存放在内存中，数据量小，读取块\"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\" ARCHIVE;归档，有很好的压缩机制\"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\" CSV;紧凑数据块,支持CSV格式数据文件,常用于其他软件或数据库中导入数据 \")])),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_van_collapse_item, {\n          title: \"聚簇索引与非聚簇索引\",\n          name: \"4\"\n        }, {\n          default: _withCtx(() => _cache[57] || (_cache[57] = [_createTextVNode(\" 聚簇索引指的是值与索引都是一样的，找到索引就找到值了，一般主键都是聚簇索引\"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\" 非聚簇索引，索引与值非开存储，查询时需要先查到索引然后再根据索引查询值\"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */)])),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_van_collapse_item, {\n          title: \"如何分库分表\",\n          name: \"5\"\n        }, {\n          default: _withCtx(() => _cache[58] || (_cache[58] = [_createTextVNode(\" 垂直分库 按业务拆分（如用户库，订单库），水平分表 按分片健分散数据 \")])),\n          _: 1 /* STABLE */\n        })]),\n        _: 1 /* STABLE */\n      }, 8 /* PROPS */, [\"modelValue\"]), [[_vShow, $data.active == 3]]), _withDirectives(_createVNode(_component_van_collapse, {\n        modelValue: $data.activeName,\n        \"onUpdate:modelValue\": _cache[5] || (_cache[5] = $event => $data.activeName = $event),\n        accordion: \"\"\n      }, {\n        default: _withCtx(() => [_createVNode(_component_van_collapse_item, {\n          title: \"vue的生命周期\",\n          name: \"1\"\n        }, {\n          default: _withCtx(() => _cache[59] || (_cache[59] = [_createTextVNode(\" beforeCreate:在创建实例后调,数据观测和事件配置之前调用。 created: \")])),\n          _: 1 /* STABLE */\n        })]),\n        _: 1 /* STABLE */\n      }, 8 /* PROPS */, [\"modelValue\"]), [[_vShow, $data.active == 4]]), _withDirectives(_createVNode(_component_van_collapse, {\n        modelValue: $data.activeName,\n        \"onUpdate:modelValue\": _cache[6] || (_cache[6] = $event => $data.activeName = $event),\n        accordion: \"\"\n      }, {\n        default: _withCtx(() => [_createVNode(_component_van_collapse_item, {\n          title: \"Redis和Mysql数据不一致\",\n          name: \"1\"\n        }), _createVNode(_component_van_collapse_item, {\n          title: \"登陆模块的步骤\",\n          name: \"2\"\n        }, {\n          default: _withCtx(() => _cache[60] || (_cache[60] = [_createTextVNode(\" 1.用户登陆信息验证\"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\" 2.给用户发送token\"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\" 3.之后的信息传输对token进验证 \")])),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_van_collapse_item, {\n          title: \"cookie和session的区别\",\n          name: \"3\"\n        }, {\n          default: _withCtx(() => _cache[61] || (_cache[61] = [_createTextVNode(\" 1.cookie是存储在客户端中,session存储在服务器中\"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\" 2.cookie可以在客户端中持久化存储,而对话结束后session会销毁\"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\" 3.cookie存储的数据量较小,而session可存储数据量大 \")])),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_van_collapse_item, {\n          title: \"高并发时对系统的保护措施\",\n          name: \"4\"\n        }, {\n          default: _withCtx(() => _cache[62] || (_cache[62] = [_createTextVNode(\" 1.对服务器引入缓存机制;如redis,避免频繁访问数据库\"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\" 2.网关上可以作限流或者降级处理\"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\" 3.使用消息队列中间部件，实现削峰填谷 \")])),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_van_collapse_item, {\n          title: \"当超时订单未完成支付时如何处理\",\n          name: \"5\"\n        }, {\n          default: _withCtx(() => _cache[63] || (_cache[63] = [_createTextVNode(\" 消息投入到死信队列中，到达时间后，死信交换机将消息投递到消费队列， 消费队列查找没有支付订单则删除该订单。 \")])),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_van_collapse_item, {\n          title: \"哪行场景下事务会失效\",\n          name: \"6\"\n        }, {\n          default: _withCtx(() => _cache[64] || (_cache[64] = [_createTextVNode(\" 1. 自身的调用 \"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\" 2. 在非共有类中使用@Transiton,这是代理类特性决定的\"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\" 3. 不是spring容器中的实例\"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\" 4. 数据源不同 \")])),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_van_collapse_item, {\n          title: \"分布式锁使用的必要条件\",\n          name: \"6\"\n        }, {\n          default: _withCtx(() => _cache[65] || (_cache[65] = [_createTextVNode(\" 1. 自身的调用 \"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\" 2. 在非共有类中使用@Transiton,这是代理类特性决定的\"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\" 3. 不是spring容器中的实例\"), _createElementVNode(\"br\", null, null, -1 /* HOISTED */), _createTextVNode(\" 4. 数据源不同 \")])),\n          _: 1 /* STABLE */\n        })]),\n        _: 1 /* STABLE */\n      }, 8 /* PROPS */, [\"modelValue\"]), [[_vShow, $data.active == 5]])]),\n      _: 1 /* STABLE */\n    })]),\n    _: 1 /* STABLE */\n  })]);\n}","map":{"version":3,"names":["id","_createElementBlock","_hoisted_1","_createVNode","_component_van_row","default","_withCtx","_component_van_col","span","_component_van_sidebar","modelValue","$data","active","_cache","$event","onChange","$options","_component_van_sidebar_item","title","_","_component_van_collapse","activeName","accordion","_component_van_collapse_item","name","_createTextVNode","_createElementVNode"],"sources":["G:\\Workspace\\CoderWorkspace\\antd-demo\\src\\components\\HomePage.vue"],"sourcesContent":["<template>\r\n  <div id=\"home\">\r\n    <van-row>\r\n      <van-col span=\"5\">\r\n        <van-sidebar v-model=\"active\" @change=\"onChange\">\r\n          <van-sidebar-item title=\"JAVA基础\" />\r\n          <van-sidebar-item title=\"SPRING相关\" />\r\n          <van-sidebar-item title=\"Redis相关\" />\r\n          <van-sidebar-item title=\"Mysql相关\" />\r\n          <van-sidebar-item title=\"VUE相关\" />\r\n          <van-sidebar-item title=\"场景\" />\r\n        </van-sidebar>\r\n      </van-col>\r\n      <van-col span=\"19\">\r\n        <van-collapse v-show=\"active == 0\" v-model=\"activeName\" accordion>\r\n          <van-collapse-item title=\"JAVA基本数据类型有那些\" name=\"1\"\r\n            >四类八种，整形（byte,short,int,long），浮点型（float,double），char类型，boolean类型</van-collapse-item\r\n          >\r\n          <van-collapse-item title=\"JAVA的访问修饰符及访问范围\" name=\"2\">\r\n            public可以访问任何地方\r\n            <br />protected可以访问当前类所在包和其子类\r\n            <br />default可以访问当前类所在包 <br />private只可以访问当前类内部\r\n          </van-collapse-item>\r\n          <van-collapse-item title=\"重载与重写的区别\" name=\"3\">\r\n            重载（overload）:\r\n            只发生在同一个类中，方法名必须相同，方法参数需不一致。与访问修饰符与返回值类型无关\r\n            <br />重写（overwrite）：\r\n            发生在父子类中，方法名与父类方法名相同，方法参数个数类型及返回值类型一致，抛出异常范围不大于父类，访问修饰符不小于父类。\r\n          </van-collapse-item>\r\n          <van-collapse-item title=\"Final类的特点\" name=\"4\"\r\n            >final修饰的类不能继承；final修饰的方法不能重写；final修饰的属性不能修改</van-collapse-item\r\n          >\r\n          <van-collapse-item title=\"类的加载过程\" name=\"5\">\r\n            类加载按需加载，当需要一个类时，类加载器会将类的字节码文件加载到内存中，放到方法区，生成此类的模板。而类加载器会\r\n            使用双亲委派的模式，避免此类重复加载。<br />\r\n            而类加载一般有类加载->链接（验证、准备、解析）->初始化几个过程\r\n          </van-collapse-item>\r\n          <van-collapse-item title=\"什么是垃圾处理\" name=\"6\"\r\n            >垃圾收集是将分配给对象但不再使用的内存回收或释放的过程。如果一个对象没有指向它的引用或者其赋值为null,则次对象适合进行垃圾回收</van-collapse-item\r\n          >\r\n          <van-collapse-item title=\"抽象类和接口的区别\" name=\"7\">\r\n            抽象类：抽象类单继承，不仅可以有抽象方法也可以有自己实现的方法\r\n            <br />接口：接口多实现，一般接口只有抽象方法。\r\n          </van-collapse-item>\r\n          <van-collapse-item title=\"什么是类的反射机制\" name=\"8\"\r\n            >通过\r\n            Class对象，可以得出当前类的方法、构造方法、接口、父类等等信息，同时可以通过反射实例化一个类、设置属性、调用方法。</van-collapse-item\r\n          >\r\n          <van-collapse-item title=\"static的使用\" name=\"9\">\r\n            静态方法不可以调用非静态的属性和方法\r\n            <br />非静态方法可以调用静态方法和属性\r\n          </van-collapse-item>\r\n          <van-collapse-item title=\"写clone()方法时通常都有一行代码\" name=\"10\"\r\n            >super.clone()，Clone有缺省行为，它负者产生正确的大小空间，并逐位复制</van-collapse-item\r\n          >\r\n          <van-collapse-item title=\"StringBuffer和StringBuilder的区别\" name=\"11\"\r\n            >StringBuffer线程安全；StringBuilder效率更高，线程不安全；</van-collapse-item\r\n          >\r\n          <van-collapse-item title=\"JAVA中都有那些IO流\" name=\"12\">\r\n            按单位可以分为字节流和字符流；\r\n            <br />按方向可以分为输入流和输出流；\r\n            <br />按功能可以分为高层流和低层流（低层流指一次只读取一个单位，而高层流一次可以读取一批单位）\r\n          </van-collapse-item>\r\n          <van-collapse-item title=\"JVM内存模型\" name=\"13\">\r\n            JVM内存模型包括执行引擎（垃圾回收，及时编译器，解释器）和运行时数据区和本地库接口\r\n            <br />运行时数据区包含：\r\n            <br />方法区（MethodArea）：存储类的信息，常量，静态变量，即时编译器编译后的代码。\r\n            <br />堆（Heap）：存放new出来的对象 <br />程序计数器（PC\r\n            Register）：指向当前线程执行的字节码地址 <br />本地方法区（Native\r\n            Method Stack）：可以调用本地方法 <br />虚拟机栈（JVM\r\n            Stack）：存储方法的栈针，包括局部变量表，操作数栈，方法出口，动态链接等信息\r\n            <br />\r\n          </van-collapse-item>\r\n          <van-collapse-item title=\"集合有哪些接口\" name=\"15\"\r\n            >Colection接口和Map接口；Collection下包括Set和List接口</van-collapse-item\r\n          >\r\n          <van-collapse-item title=\"ArrayList和LinkList区别\" name=\"16\">\r\n            ArrayList由数组实现，查找快速，插入和删除比较慢；\r\n            <br />LinkList由双向链表实现，插入和删除快，查询较慢，占用空间大，因为每一个元素都存放有指向下一个和上一个元素的指针。\r\n          </van-collapse-item>\r\n          <van-collapse-item title=\"Set的特点\" name=\"17\"\r\n            >存放的元素都是不重复的。（先比较HashCode()方法，再比较equal()方法）</van-collapse-item\r\n          >\r\n          <van-collapse-item title=\"面向对象的特征有哪像\" name=\"18\">\r\n            封装：一个类包括多个属性及方法。\r\n            <br />多态：静态（重载、重写）动态（父类接受子类实例，接口接受实现实例\r\n            ）\r\n            <br />继承：类继承于父类，具有父类的所有属性与方法，可以重用，也可以覆盖。\r\n            <br />抽象：找共性，将共有的属性、方法放到父类中\r\n          </van-collapse-item>\r\n          <van-collapse-item title=\"如何定义一个线程\" name=\"19\">\r\n            实现Runable接口并重写run()方法;\r\n            <br />继承Thread类重写run()方法； <br />启动线程使用start()方法；\r\n          </van-collapse-item>\r\n          <van-collapse-item title=\"wait和sleep的区别\" name=\"20\">\r\n            拥有的对象不同：wait()是Object的方法,sleep()是Thread的方法；\r\n            <br />wait()释放对象锁，且只能在同步代码块或同步方法中使用，可以通过notify唤醒；\r\n            <br />sleep()持有对象锁，只能等待设定时间结束，否则发生异常\r\n          </van-collapse-item>\r\n          <van-collapse-item title=\"jdk代理和cjlib代理的区别\" name=\"21\">\r\n            jdk代理实现InvocationHandler接口；jdk代理只能代理接口类\r\n            <br />cjlib代理实现MethodInterceptor接口；使用动态枝剪技术生成目标类子类来代理。\r\n          </van-collapse-item>\r\n          <van-collapse-item title=\"jdk1.8有哪些特性\" name=\"22\">\r\n            函式接口的使用\r\n            <br />Stream的使用 <br />LocalDateTime的使用\r\n            <br />Optional容器的使用\r\n          </van-collapse-item>\r\n          <van-collapse-item title=\"并发问题\" name=\"23\">\r\n            有序性、原子性、可见性\r\n            <br />volatile 修饰变量解决有序性和可见性问题；synchronzied\r\n            通过加锁解决有序性、可见性、原子性问题；\r\n          </van-collapse-item>\r\n          <van-collapse-item title=\"java中的类加载器\" name=\"24\">\r\n            1.引导类加载器；加载java的核心库 2.扩展类加载器；加载扩展类库(jre\r\n            lib下的jar包) 3.系统类加载器；加载应用类路径下的类及jar包\r\n            4.自定义加载器\r\n          </van-collapse-item>\r\n          <van-collapse-item title=\"java值传递和引用传递\" name=\"25\">\r\n            值传递的是副本，不会改变地址；\r\n            引用传递的是引用地址。java中只用值传递。\r\n          </van-collapse-item>\r\n          <van-collapse-item title=\"for和forEach区别\" name=\"26\">\r\n            for通过index下标进行访问；forEach通过指针进行访问\r\n          </van-collapse-item>\r\n          <van-collapse-item title=\"乐观锁和悲观锁的区别\" name=\"27\">\r\n            悲观锁设计思路是当存在多个线程竞争一个资源的可能，首先会加上锁，阻止其他线程获得这个资源，直到他对资源修改完成。例如sychronized关键字<br />\r\n            乐观锁设计思路是当存在多个线程竞争一个资源的可能，首先会获取资源，然后修改资源，最后再看是否发生冲突。实现方式有CAS，版本号控制等。<br />\r\n            乐观锁用多用于读多写少，相比悲观锁他的效率更高。\r\n          </van-collapse-item>\r\n          <van-collapse-item title=\"jvm的调优命令有哪些\" name=\"28\">\r\n            jstack 查看线程状态，分析出繁忙的线程在干嘛 jmap\r\n            查看内存信息，生成dump文件 jinfo 查看jvm参数和修改部分动态参数 jstat\r\n            查看jvm状态 jps 查看进程\r\n          </van-collapse-item>\r\n          <van-collapse-item title=\"事物的传播行为\" name=\"29\">\r\n            1.request\r\n            支持事物，若存在事物，会加入到这个事物当中；若不存在事物，会新建一个事物<br />\r\n            2.request_new\r\n            无论当前是否存在事物，都会新建一个事物，若存在事物，会当前事物挂起<br />\r\n            3.support\r\n            支持事物，若当前存在事物，会加入事物中；若不存在以非事物形式运行<br />\r\n            4.not_support 不支持事物，不论是否存在事物；以非事物形式运行 <br />\r\n            5.mandatory 必须支持事物，若当前不存在事物；会抛出异常<br />\r\n            6.never\r\n            不支持事物，若当前存在事物，会抛出异常；若不存在以非事物形式运行<br />\r\n            7.nested 嵌套事物，会在当前事物内部开启新的事物。\r\n          </van-collapse-item>\r\n          <van-collapse-item title=\"事物的特性\" name=\"30\">\r\n            1.原子行 一个事物所有的操作要不是提交，要不就是回滚<br />\r\n            2.一致性 事物执行时数据库的所有约束原则保持一致<br />\r\n            3.永久性 事物数据一旦提交，永远保存在数据库中<br />\r\n            4.隔离性 事物之间互不干扰<br />\r\n          </van-collapse-item>\r\n          \r\n        </van-collapse>\r\n        <van-collapse v-show=\"active == 1\" v-model=\"activeName\" accordion>\r\n          <van-collapse-item title=\"SpringMVC流程\" name=\"1\">\r\n            用户请求->DispatcherServlet（前端控制器）->HandlerMapping（处理器映射器）‌->\r\n            HandlerAdapter（处理器适配器）-> DispatcherServlet（前端控制器）\r\n            <br />DispatcherServlet（前端控制器）->\r\n            执行相应的业务（从数据库中获取数据 ModelAndView） ->\r\n            ViewResolver（视图解析器）-> DispatcherServlet（前端控制器）->\r\n            返回给用户\r\n          </van-collapse-item>\r\n          <van-collapse-item title=\"依赖注入\" name=\"2\">\r\n            一种重要的设计模式，允许对象在不直接创建依赖的情况下使用，\r\n            通过spring容器来管理这些依赖。\r\n            <br />一般的可以通过构造器，setter方法及接口进行依赖注入\r\n          </van-collapse-item>\r\n          <van-collapse-item title=\"Spring中bean的生命周期\" name=\"3\">\r\n            bean对象的实例化;通过beanFactory工厂创建bean对象\r\n            <br />依赖注入;通过setter方法或者构造器进行 <br />初始化 <br />销毁\r\n            <br />这其中提供了许多钩子函数，比如初始化前的beanNameAware、beanFactoryAware提供容器信息。\r\n            beanPostProcessor提供ben初始化前后的自定义逻辑postProcessBeforeInitialization()、postProcessAfterInitialization()。\r\n            initalizingBean实现自定义初始化逻辑<br />\r\n            实例化 → 属性填充 → BeanNameAware → BeanFactoryAware → 前置处理器 →\r\n            @PostConstruct → 初始化方法 → 后置处理器 → 使用中 → @PreDestroy →\r\n            销毁。\r\n          </van-collapse-item>\r\n          <van-collapse-item title=\"spring常用的Annotation\" name=\"4\">\r\n            @Bean、@Value、@Controller、@Service、@Repository、@Configuration、@Autowired\r\n            、@Resource、 @Import、@Qualifier\r\n          </van-collapse-item>\r\n          <van-collapse-item title=\"Springboot自动装配原理\" name=\"5\">\r\n            基于@EnableAutoConfiguration扫描META-INF/spring.factories中的配置类，条件注解（如@ConditionalOnClass）控制是否生效。<br />\r\n            自定义Starter： 创建配置类+spring.factories，定义条件化Bean。\r\n          </van-collapse-item>\r\n          <van-collapse-item title=\"Spring中事务失效\" name=\"6\">\r\n            1. @Transcation注解用到非public方法上修饰对的（springAop特性）\r\n            <br />2.由于数据库引擎不支持事务(如mysql的Mysiam) <br />3.\r\n            spring容器管理的bean才接受事务 <br />4. 当前类自身调用自己的方法\r\n            <br />5. 异常类错误类型（非运行时异常） </van-collapse-item\r\n          >\r\n          <van-collapse-item title=\"Spring如何解决循环依赖\" name=\"7\"\r\n            >三级缓存和延迟加载机制。（先在缓存中创建中创建纯净对象，延迟完成实例化）</van-collapse-item\r\n          >\r\n          <van-collapse-item\r\n            title=\"BeanFactory与ApplicationContext区别\"\r\n            name=\"8\"\r\n          >\r\n            BeanFactory主要作用是bean的创建和读取；<br />\r\n            ApplicationContext继承于BeanFactory功能更丰富，国际化、aop、消息发送响应机制\r\n          </van-collapse-item>\r\n          <van-collapse-item title=\"Spring中支持bean作用域有哪些\" name=\"9\">\r\n            1.singleton; 单例模式 <br />\r\n            2.protoype; 原型模式 <br />\r\n            3.request; 每次http请求都会创建一个request <br />\r\n            4.session; 每次session会回都会有一个session域 <br />\r\n            5.global-session 所有的session会话都有一个gloabal-session域\r\n          </van-collapse-item>\r\n          <van-collapse-item title=\"@RequestParam和@RequestBody区别\" name=\"9\">\r\n            @RequestBody只接受请求体的格式请求，一般为Post请求 <br />\r\n            @RequestParam 只接受key-value的参数，一般为get请求\r\n          </van-collapse-item>\r\n          <van-collapse-item title=\"SpringCloud有哪些组件\" name=\"10\">\r\n            Eurake 注册中心<br />\r\n            Zuul 网关服务<br />\r\n            Feign 微服务之间的调用<br />\r\n            Ribbon 实现分布式服务时提供负载均衡策略<br />\r\n            Hystrix 提供熔断机制，实现服务隔离\r\n          </van-collapse-item>\r\n          <van-collapse-item title=\"Spring的特性\" name=\"11\">\r\n            1.IOC（控制反转）将创建对象的权利交由spring进行管理<br />\r\n            2.DI（依赖注入）允许对象在不直接创建依赖的情况下使用，通过spring容器来管理这些依赖。<br />\r\n            3.AOP（切面编程）不修改源代码的情况下对其进行增强，比如日志的记录。\r\n          </van-collapse-item>\r\n        </van-collapse>\r\n        <van-collapse v-show=\"active == 2\" v-model=\"activeName\" accordion>\r\n          <van-collapse-item title=\"Redis的部署模式\" name=\"1\">\r\n            1.单机模式；即部署一台redis服务<br />\r\n            2.主从模式；即部署一个redis主服务器master，多个slave服务。主redis服务主要用于写，从服务用于读。主服务写完成同步更新到从服务<br />\r\n            3.Sentinel哨兵模式；避免主服务master出现不可用的情况<br />\r\n            4.集群模式\r\n          </van-collapse-item>\r\n          <van-collapse-item title=\"Redis的分区方案\" name=\"2\">\r\n            1.客户端分区，由客户端决定数据在哪个节点的存取<br />\r\n            2.代理分区；客户端将请求发送给代理，由代理决定数据存在什么分区<br />\r\n            3.查路由，客户端随机请求一个ridis实例，然后redis将请求转发给正确的redis节点\r\n          </van-collapse-item>\r\n          <van-collapse-item title=\"Redis的RDB与AOF模式优缺点\" name=\"3\">\r\n            RDB为快照模式，即某一时间点子线程会把redis所有的数据以文件形式存储到磁盘中。\r\n            这样主线程负责数据处理，而不影响子线程io处理。保证性能最大化。缺点是可能导致数据丢失。<br />\r\n            AOF为追加型模式，可以让每条命令都会以追加文件形式持久化，rewrite模式可以使文件过大时合并命令。\r\n            对于RDB来说更加安全。\r\n          </van-collapse-item>\r\n          <van-collapse-item title=\"Redis的缓冲穿透解决\" name=\"4\">\r\n            缓冲穿透指的是用户大量的访问数据库中没有的数据，导致系统崩溃或者响应变慢。<br />\r\n            1.可以设置键值为null的数据。<br />\r\n            2.使用布隆过滤器，在访问数据库之前过滤掉非法的key值\r\n          </van-collapse-item>\r\n          <van-collapse-item title=\"Redis的使用场景\" name=\"5\">\r\n            1.读多写少<br />\r\n            2.分布式锁<br />\r\n            3.字典类数据<br />\r\n            4.时效性数据, 比如验证码<br />\r\n            5.系统单点登陆存储用户信息<br />\r\n          </van-collapse-item>\r\n          <van-collapse-item title=\"为什么redis单线程效果好\" name=\"6\">\r\n            基于内存读写，使用nio的多路复用技术\r\n          </van-collapse-item>\r\n        </van-collapse>\r\n        <van-collapse v-show=\"active == 3\" v-model=\"activeName\" accordion>\r\n          <van-collapse-item title=\"Mysql优化有哪些方式\" name=\"1\">\r\n            索引优化，当需要频繁作为条件使用的字段添加索引；<br />\r\n            多个条件时可以建立组合索引；<br />\r\n            使用explain来分析语句，避免多个条件时索引失效。<br />\r\n            使用缓冲存储热点数据，避免频繁使用数据库<br />\r\n          </van-collapse-item>\r\n          <van-collapse-item title=\"什么情况下索引会失效\" name=\"2\">\r\n            组合索引时没有遵循最左索引原则<br />\r\n            查询条件使用不等号（not）、or、like<br />\r\n            在索引列上进行相关计算<br />\r\n          </van-collapse-item>\r\n          <van-collapse-item title=\"Mysql的引擎有哪些\" name=\"3\">\r\n            InnoDB;事务型存储引擎，并且有较高并发的读取效率<br />\r\n            MyISAM;不支持事务处理和行级锁，特点简单、快速、小巧<br />\r\n            MEMORY;存储引擎，存放在内存中，数据量小，读取块<br />\r\n            ARCHIVE;归档，有很好的压缩机制<br />\r\n            CSV;紧凑数据块,支持CSV格式数据文件,常用于其他软件或数据库中导入数据\r\n          </van-collapse-item>\r\n          <van-collapse-item title=\"聚簇索引与非聚簇索引\" name=\"4\">\r\n            聚簇索引指的是值与索引都是一样的，找到索引就找到值了，一般主键都是聚簇索引<br />\r\n            非聚簇索引，索引与值非开存储，查询时需要先查到索引然后再根据索引查询值<br\r\n          /></van-collapse-item>\r\n          <van-collapse-item title=\"如何分库分表\" name=\"5\">\r\n            垂直分库 按业务拆分（如用户库，订单库），水平分表 按分片健分散数据\r\n          </van-collapse-item>\r\n        </van-collapse>\r\n        <van-collapse v-show=\"active == 4\" v-model=\"activeName\" accordion>\r\n          <van-collapse-item title=\"vue的生命周期\" name=\"1\">\r\n            beforeCreate:在创建实例后调,数据观测和事件配置之前调用。 created:\r\n          </van-collapse-item>\r\n        </van-collapse>\r\n        <van-collapse v-show=\"active == 5\" v-model=\"activeName\" accordion>\r\n          <van-collapse-item title=\"Redis和Mysql数据不一致\" name=\"1\">\r\n          </van-collapse-item>\r\n          <van-collapse-item title=\"登陆模块的步骤\" name=\"2\">\r\n            1.用户登陆信息验证<br />\r\n            2.给用户发送token<br />\r\n            3.之后的信息传输对token进验证\r\n          </van-collapse-item>\r\n          <van-collapse-item title=\"cookie和session的区别\" name=\"3\">\r\n            1.cookie是存储在客户端中,session存储在服务器中<br />\r\n            2.cookie可以在客户端中持久化存储,而对话结束后session会销毁<br />\r\n            3.cookie存储的数据量较小,而session可存储数据量大\r\n          </van-collapse-item>\r\n          <van-collapse-item title=\"高并发时对系统的保护措施\" name=\"4\">\r\n            1.对服务器引入缓存机制;如redis,避免频繁访问数据库<br />\r\n            2.网关上可以作限流或者降级处理<br />\r\n            3.使用消息队列中间部件，实现削峰填谷\r\n          </van-collapse-item>\r\n          <van-collapse-item title=\"当超时订单未完成支付时如何处理\" name=\"5\">\r\n            消息投入到死信队列中，到达时间后，死信交换机将消息投递到消费队列，\r\n            消费队列查找没有支付订单则删除该订单。\r\n          </van-collapse-item>\r\n          <van-collapse-item title=\"哪行场景下事务会失效\" name=\"6\">\r\n               1. 自身的调用 <br>\r\n               2. 在非共有类中使用@Transiton,这是代理类特性决定的<br>\r\n               3. 不是spring容器中的实例<br>\r\n               4. 数据源不同\r\n          </van-collapse-item>\r\n          <van-collapse-item title=\"分布式锁使用的必要条件\" name=\"6\">\r\n               1. 自身的调用 <br>\r\n               2. 在非共有类中使用@Transiton,这是代理类特性决定的<br>\r\n               3. 不是spring容器中的实例<br>\r\n               4. 数据源不同\r\n          </van-collapse-item>\r\n        </van-collapse>\r\n      </van-col>\r\n    </van-row>\r\n  </div>\r\n</template>\r\n<script>\r\n// import { showToast } from \"vant\";\r\nexport default {\r\n  data() {\r\n    return {\r\n      activeName: \"-1\",\r\n      active: \"0\",\r\n    };\r\n  },\r\n  methods: {\r\n    onChange(index) {\r\n      this.active = index;\r\n      // showToast(index);\r\n    },\r\n  },\r\n};\r\n</script>\r\n<style scoped>\r\n#home .van-collapse-item__content {\r\n  color: rgba(226, 63, 13, 0.637);\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}